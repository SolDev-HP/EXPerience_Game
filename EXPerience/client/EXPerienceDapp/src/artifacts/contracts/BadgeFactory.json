{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "callthisForImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "3": "contracts/libs/BadgeFactory.sol",
    "5": "contracts/utils/Base64.sol",
    "8": "contracts/utils/Strings.sol"
  },
  "ast": {
    "absolutePath": "contracts/libs/BadgeFactory.sol",
    "exportedSymbols": {
      "BadgeFactory": [
        539
      ],
      "Base64": [
        1482
      ],
      "Strings": [
        1708
      ]
    },
    "id": 540,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 309,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:24:3"
      },
      {
        "absolutePath": "contracts/utils/Strings.sol",
        "file": "../utils/Strings.sol",
        "id": 310,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 540,
        "sourceUnit": 1709,
        "src": "61:30:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/utils/Base64.sol",
        "file": "../utils/Base64.sol",
        "id": 311,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 540,
        "sourceUnit": 1483,
        "src": "93:29:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "BadgeFactory",
        "contractDependencies": [],
        "contractKind": "library",
        "fullyImplemented": true,
        "id": 539,
        "linearizedBaseContracts": [
          539
        ],
        "name": "BadgeFactory",
        "nameLocation": "283:12:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 314,
            "mutability": "constant",
            "name": "_svgCont_Start",
            "nameLocation": "635:14:3",
            "nodeType": "VariableDeclaration",
            "scope": 539,
            "src": "610:1892:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 312,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "610:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222076696577426f783d223020302033303020333030223e203c7374796c6520747970653d22746578742f637373223e203c215b43444154415b202a2c202a3a6265666f72652c202a3a6166746572207b20626f782d73697a696e673a20626f726465722d626f783b7d20626f6479207b206865696768743a2031303076683b206261636b67726f756e643a20233030303b7d202e63656e746572207b206865696768743a20313030253b20646973706c61793a20666c65783b20616c69676e2d6974656d733a2063656e7465723b206a7573746966792d636f6e74656e743a2063656e7465723b20746578742d616c69676e3a2063656e7465723b7d202e636972636c65207b20706f736974696f6e3a2072656c61746976653b2077696474683a2032303070783b206865696768743a2032303070783b20636f6c6f723a20236666663b206261636b67726f756e643a20233030303b20626f726465722d7261646975733a203530253b20626f726465723a2032707820736f6c69643b7d202e6c6f676f207b20666f6e742d73697a653a2031323570783b206c696e652d6865696768743a2031393070783b20766572746963616c2d616c69676e3a206d6964646c653b7d202e627574746f6e207b20706f736974696f6e3a206162736f6c7574653b20626f74746f6d3a203070783b206c6566743a20303b2072696768743a20303b2070616464696e673a203870783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b206261636b67726f756e643a20233030303b20626f726465723a2032707820736f6c69643b20616e696d6174696f6e3a20736c69646520312e347320656173652d696e2d6f757420696e66696e6974653b20637572736f723a20706f696e7465723b7d202e627574746f6e3a686f766572207b20636f6c6f723a20233030303b206261636b67726f756e643a20236666663b20626f726465722d636f6c6f723a20236666663b7d20406b65796672616d657320736c696465207b203025207b207472616e73666f726d3a207472616e736c61746558283130707829207d20353025207b7472616e73666f726d3a207472616e736c61746558282d3130707829207d2031303025207b207472616e73666f726d3a207472616e736c61746558283130707829207d7d202e74657874207b20706f736974696f6e3a206162736f6c7574653b20746f703a20303b206c6566743a20303b2077696474683a20313030253b206865696768743a20313030253b20666f6e742d73697a653a20323470783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b20616e696d6174696f6e3a20726f7461746520313473206c696e65617220696e66696e6974653b2066696c6c3a20236666663b7d20406b65796672616d657320726f74617465207b2066726f6d207b207472616e73666f726d3a20726f746174652830293b207d20746f207b207472616e73666f726d3a20726f7461746528333630646567293b207d7d205d5d3e203c2f7374796c653e203c666f726569676e4f626a65637420783d2232302220793d223230222077696474683d2233303022206865696768743d22333030223e203c64697620636c6173733d2263656e7465722220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d22636972636c652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d226c6f676f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e49493c2f6469763e3c64697620636c6173733d22746578742220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e20203c73766720783d22302220793d2230222076696577426f783d2230203020333030203330302220656e61626c652d6261636b67726f756e643d226e65772030203020333030203330302220786d6c3a73706163653d2270726573657276652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e203c646566733e203c706174682069643d22636972636c65506174682220643d22204d203135302c20313530206d202d3132302c20302061203132302c313230203020302c31203234302c302061203132302c313230203020302c31202d3234302c30202220202f3e203c2f646566733e203c673e203c746578743e203c746578745061746820687265663d2223636972636c65506174682220786d6c3a73706163653d227072657365727665223e455850657269656e6365204e465421202020202020202020466f722e45746865726e61757444414f2020202020202020204c6576656c202d20",
              "id": 313,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "652:1850:3",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_2a6daeea41f0ce60cbdc81e52d63321855a27c4e99ad2b98612b3ef811c879a4",
                "typeString": "literal_string \"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 300\"> <style type=\"text/css\"> <![CDATA[ *, *:before, *:after { box-sizing: border-box;} body { height: 100vh; background: #000;} .center { height: 100%; display: flex; align-items: center; justify-content: center; text-align: center;} .circle { position: relative; width: 200px; height: 200px; color: #fff; background: #000; border-radius: 50%; border: 2px solid;} .logo { font-size: 125px; line-height: 190px; vertical-align: middle;} .button { position: absolute; bottom: 0px; left: 0; right: 0; padding: 8px; font-weight: bold; text-transform: uppercase; background: #000; border: 2px solid; animation: slide 1.4s ease-in-out infinite; cursor: pointer;} .button:hover { color: #000; background: #fff; border-color: #fff;} @keyframes slide { 0% { transform: translateX(10px) } 50% {transform: translateX(-10px) } 100% { transform: translateX(10px) }} .text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; font-size: 24px; font-weight: bold; text-transform: uppercase; animation: rotate 14s linear infinite; fill: #fff;} @keyframes rotate { from { transform: rotate(0); } to { transform: rotate(360deg); }} ]]> </style> <foreignObject x=\"20\" y=\"20\" width=\"300\" height=\"300\"> <div class=\"center\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"circle\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"logo\" xmlns=\"http://www.w3.org/1999/xhtml\">II</div><div class=\"text\" xmlns=\"http://www.w3.org/1999/xhtml\">  <svg x=\"0\" y=\"0\" viewBox=\"0 0 300 300\" enable-background=\"new 0 0 300 300\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"> <defs> <path id=\"circlePath\" d=\" M 150, 150 m -120, 0 a 120,120 0 0,1 240,0 a 120,120 0 0,1 -240,0 \"  /> </defs> <g> <text> <textPath href=\"#circlePath\" xml:space=\"preserve\">EXPerience NFT!         For.EthernautDAO         Level - \""
              },
              "value": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 300\"> <style type=\"text/css\"> <![CDATA[ *, *:before, *:after { box-sizing: border-box;} body { height: 100vh; background: #000;} .center { height: 100%; display: flex; align-items: center; justify-content: center; text-align: center;} .circle { position: relative; width: 200px; height: 200px; color: #fff; background: #000; border-radius: 50%; border: 2px solid;} .logo { font-size: 125px; line-height: 190px; vertical-align: middle;} .button { position: absolute; bottom: 0px; left: 0; right: 0; padding: 8px; font-weight: bold; text-transform: uppercase; background: #000; border: 2px solid; animation: slide 1.4s ease-in-out infinite; cursor: pointer;} .button:hover { color: #000; background: #fff; border-color: #fff;} @keyframes slide { 0% { transform: translateX(10px) } 50% {transform: translateX(-10px) } 100% { transform: translateX(10px) }} .text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; font-size: 24px; font-weight: bold; text-transform: uppercase; animation: rotate 14s linear infinite; fill: #fff;} @keyframes rotate { from { transform: rotate(0); } to { transform: rotate(360deg); }} ]]> </style> <foreignObject x=\"20\" y=\"20\" width=\"300\" height=\"300\"> <div class=\"center\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"circle\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"logo\" xmlns=\"http://www.w3.org/1999/xhtml\">II</div><div class=\"text\" xmlns=\"http://www.w3.org/1999/xhtml\">  <svg x=\"0\" y=\"0\" viewBox=\"0 0 300 300\" enable-background=\"new 0 0 300 300\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"> <defs> <path id=\"circlePath\" d=\" M 150, 150 m -120, 0 a 120,120 0 0,1 240,0 a 120,120 0 0,1 -240,0 \"  /> </defs> <g> <text> <textPath href=\"#circlePath\" xml:space=\"preserve\">EXPerience NFT!         For.EthernautDAO         Level - "
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 317,
            "mutability": "constant",
            "name": "_svgCont_Mid",
            "nameLocation": "2536:12:3",
            "nodeType": "VariableDeclaration",
            "scope": 539,
            "src": "2511:149:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 315,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2511:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "3c2f74657874506174683e3c2f746578743e3c2f673e3c2f7376673e3c2f6469763e3c64697620636c6173733d22627574746f6e2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e5b4558505d2042616c616e6365202d20",
              "id": 316,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2551:109:3",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a5375823de7557ac06e225f72800e64a22161307cba34f877b37e689e2cc2fd1",
                "typeString": "literal_string \"</textPath></text></g></svg></div><div class=\"button\" xmlns=\"http://www.w3.org/1999/xhtml\">[EXP] Balance - \""
              },
              "value": "</textPath></text></g></svg></div><div class=\"button\" xmlns=\"http://www.w3.org/1999/xhtml\">[EXP] Balance - "
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 320,
            "mutability": "constant",
            "name": "_svgCont_End",
            "nameLocation": "2694:12:3",
            "nodeType": "VariableDeclaration",
            "scope": 539,
            "src": "2669:82:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 318,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2669:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "3c2f6469763e3c2f6469763e3c2f6469763e3c2f666f726569676e4f626a6563743e3c2f7376673e",
              "id": 319,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2709:42:3",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_116e870cece882d158a2de3f8dd8530121f8674b13990f6613899e213e48ed00",
                "typeString": "literal_string \"</div></div></div></foreignObject></svg>\""
              },
              "value": "</div></div></div></foreignObject></svg>"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 397,
              "nodeType": "Block",
              "src": "2992:457:3",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 329,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 327,
                        "name": "_tokenAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "3006:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 328,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3021:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "3006:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 336,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 330,
                        "name": "_tokenAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "3026:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_rational_20000000000000000000_by_1",
                          "typeString": "int_const 20000000000000000000"
                        },
                        "id": 335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3230",
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3042:2:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_20_by_1",
                            "typeString": "int_const 20"
                          },
                          "value": "20"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3130",
                            "id": 332,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3047:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "hexValue": "3138",
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3053:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "src": "3047:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "3042:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20000000000000000000_by_1",
                          "typeString": "int_const 20000000000000000000"
                        }
                      },
                      "src": "3026:29:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3006:49:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 346,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 340,
                          "name": "_tokenAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "3099:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_20000000000000000000_by_1",
                            "typeString": "int_const 20000000000000000000"
                          },
                          "id": 345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3230",
                            "id": 341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3114:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "id": 344,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 342,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3119:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3138",
                              "id": 343,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3125:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "src": "3119:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            }
                          },
                          "src": "3114:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_20000000000000000000_by_1",
                            "typeString": "int_const 20000000000000000000"
                          }
                        },
                        "src": "3099:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "&&",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 353,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 347,
                          "name": "_tokenAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "3131:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_40000000000000000000_by_1",
                            "typeString": "int_const 40000000000000000000"
                          },
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3430",
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3147:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_40_by_1",
                              "typeString": "int_const 40"
                            },
                            "value": "40"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "id": 351,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 349,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3152:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3138",
                              "id": 350,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3158:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "src": "3152:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            }
                          },
                          "src": "3147:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_40000000000000000000_by_1",
                            "typeString": "int_const 40000000000000000000"
                          }
                        },
                        "src": "3131:29:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3099:61:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 357,
                            "name": "_tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 322,
                            "src": "3205:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_40000000000000000000_by_1",
                              "typeString": "int_const 40000000000000000000"
                            },
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3430",
                              "id": 358,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3220:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_40_by_1",
                                "typeString": "int_const 40"
                              },
                              "value": "40"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3225:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 360,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3231:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "3225:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            },
                            "src": "3220:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_40000000000000000000_by_1",
                              "typeString": "int_const 40000000000000000000"
                            }
                          },
                          "src": "3205:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 364,
                            "name": "_tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 322,
                            "src": "3237:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_60000000000000000000_by_1",
                              "typeString": "int_const 60000000000000000000"
                            },
                            "id": 369,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3630",
                              "id": 365,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3253:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_60_by_1",
                                "typeString": "int_const 60"
                              },
                              "value": "60"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 368,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 366,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3258:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 367,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3264:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "3258:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            },
                            "src": "3253:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_60000000000000000000_by_1",
                              "typeString": "int_const 60000000000000000000"
                            }
                          },
                          "src": "3237:29:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3205:61:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 388,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 380,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 374,
                              "name": "_tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 322,
                              "src": "3312:12:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_rational_60000000000000000000_by_1",
                                "typeString": "int_const 60000000000000000000"
                              },
                              "id": 379,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3630",
                                "id": 375,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3327:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_60_by_1",
                                  "typeString": "int_const 60"
                                },
                                "value": "60"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "id": 378,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 376,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3332:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "3138",
                                  "id": 377,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3338:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_18_by_1",
                                    "typeString": "int_const 18"
                                  },
                                  "value": "18"
                                },
                                "src": "3332:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                }
                              },
                              "src": "3327:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_60000000000000000000_by_1",
                                "typeString": "int_const 60000000000000000000"
                              }
                            },
                            "src": "3312:28:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 387,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 381,
                              "name": "_tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 322,
                              "src": "3344:12:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_rational_80000000000000000000_by_1",
                                "typeString": "int_const 80000000000000000000"
                              },
                              "id": 386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3830",
                                "id": 382,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3360:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_80_by_1",
                                  "typeString": "int_const 80"
                                },
                                "value": "80"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "id": 385,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 383,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3365:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "3138",
                                  "id": 384,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3371:2:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_18_by_1",
                                    "typeString": "int_const 18"
                                  },
                                  "value": "18"
                                },
                                "src": "3365:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                }
                              },
                              "src": "3360:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_80000000000000000000_by_1",
                                "typeString": "int_const 80000000000000000000"
                              }
                            },
                            "src": "3344:29:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3312:61:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "expression": {
                            "hexValue": "2d472d",
                            "id": 391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3436:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_db6c9035a931bd458ac71edb5f187cf5627f7e945c52251364a07d6166a9db70",
                              "typeString": "literal_string \"-G-\""
                            },
                            "value": "-G-"
                          },
                          "functionReturnParameters": 326,
                          "id": 392,
                          "nodeType": "Return",
                          "src": "3429:12:3"
                        },
                        "id": 393,
                        "nodeType": "IfStatement",
                        "src": "3309:132:3",
                        "trueBody": {
                          "expression": {
                            "hexValue": "4956",
                            "id": 389,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3395:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_b9a629357ee888a8160a94f13bc67eee0b628378e0a1d6c6fb8228cdb110e1c1",
                              "typeString": "literal_string \"IV\""
                            },
                            "value": "IV"
                          },
                          "functionReturnParameters": 326,
                          "id": 390,
                          "nodeType": "Return",
                          "src": "3388:11:3"
                        }
                      },
                      "id": 394,
                      "nodeType": "IfStatement",
                      "src": "3202:239:3",
                      "trueBody": {
                        "expression": {
                          "hexValue": "494949",
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3288:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_62e2ba780dfb3475e142946bbf20fd1ba37282c561b194bcc476f6a547cc4109",
                            "typeString": "literal_string \"III\""
                          },
                          "value": "III"
                        },
                        "functionReturnParameters": 326,
                        "id": 373,
                        "nodeType": "Return",
                        "src": "3281:12:3"
                      }
                    },
                    "id": 395,
                    "nodeType": "IfStatement",
                    "src": "3096:345:3",
                    "trueBody": {
                      "expression": {
                        "hexValue": "4949",
                        "id": 355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3182:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5301d21f92e4e47e130f307a51663d2e0c0b32227c636accfdc52dbf01dc9a65",
                          "typeString": "literal_string \"II\""
                        },
                        "value": "II"
                      },
                      "functionReturnParameters": 326,
                      "id": 356,
                      "nodeType": "Return",
                      "src": "3175:11:3"
                    }
                  },
                  "id": 396,
                  "nodeType": "IfStatement",
                  "src": "3003:438:3",
                  "trueBody": {
                    "expression": {
                      "hexValue": "49",
                      "id": 338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3077:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_8d61ecf6e15472e15b1a0f63cd77f62aa57e6edcd3871d7a841f1056fb42b216",
                        "typeString": "literal_string \"I\""
                      },
                      "value": "I"
                    },
                    "functionReturnParameters": 326,
                    "id": 339,
                    "nodeType": "Return",
                    "src": "3070:10:3"
                  }
                }
              ]
            },
            "id": 398,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getExperienceLevel",
            "nameLocation": "2912:19:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 323,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 322,
                  "mutability": "mutable",
                  "name": "_tokenAmount",
                  "nameLocation": "2940:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 398,
                  "src": "2932:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 321,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2932:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2931:22:3"
            },
            "returnParameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 325,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 398,
                  "src": "2977:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 324,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2977:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2976:15:3"
            },
            "scope": 539,
            "src": "2903:546:3",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 433,
              "nodeType": "Block",
              "src": "3837:386:3",
              "statements": [
                {
                  "assignments": [
                    406
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 406,
                      "mutability": "mutable",
                      "name": "_returning_svg",
                      "nameLocation": "3862:14:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 433,
                      "src": "3848:28:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 405,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3848:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 423,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 411,
                            "name": "_svgCont_Start",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 314,
                            "src": "3928:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 413,
                                "name": "_tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 400,
                                "src": "3981:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 412,
                              "name": "_getExperienceLevel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 398,
                              "src": "3961:19:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 414,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3961:33:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 415,
                            "name": "_svgCont_Mid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "4015:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 418,
                                "name": "_tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 400,
                                "src": "4063:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 416,
                                "name": "Strings",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1708,
                                "src": "4046:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Strings_$1708_$",
                                  "typeString": "type(library Strings)"
                                }
                              },
                              "id": 417,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "4046:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 419,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4046:30:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 420,
                            "name": "_svgCont_End",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 320,
                            "src": "4095:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 409,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3893:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 410,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3893:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3893:230:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 407,
                        "name": "Base64",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1482,
                        "src": "3879:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Base64_$1482_$",
                          "typeString": "type(library Base64)"
                        }
                      },
                      "id": 408,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encode",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1481,
                      "src": "3879:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (string memory)"
                      }
                    },
                    "id": 422,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3879:245:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3848:276:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "646174613a696d6167652f7376672b786d6c3b6261736536342c",
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4168:28:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                              "typeString": "literal_string \"data:image/svg+xml;base64,\""
                            },
                            "value": "data:image/svg+xml;base64,"
                          },
                          {
                            "id": 429,
                            "name": "_returning_svg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 406,
                            "src": "4198:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                              "typeString": "literal_string \"data:image/svg+xml;base64,\""
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 426,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4151:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 427,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4151:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4151:62:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 425,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4144:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 424,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4144:6:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4144:70:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 404,
                  "id": 432,
                  "nodeType": "Return",
                  "src": "4137:77:3"
                }
              ]
            },
            "id": 434,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_base64EncodeImage",
            "nameLocation": "3758:18:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 400,
                  "mutability": "mutable",
                  "name": "_tokenAmount",
                  "nameLocation": "3785:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 434,
                  "src": "3777:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3777:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3776:22:3"
            },
            "returnParameters": {
              "id": 404,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 403,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 434,
                  "src": "3822:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 402,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3822:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3821:15:3"
            },
            "scope": 539,
            "src": "3749:474:3",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 469,
              "nodeType": "Block",
              "src": "4315:386:3",
              "statements": [
                {
                  "assignments": [
                    442
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 442,
                      "mutability": "mutable",
                      "name": "_returning_svg",
                      "nameLocation": "4340:14:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 469,
                      "src": "4326:28:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 441,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4326:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 459,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 447,
                            "name": "_svgCont_Start",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 314,
                            "src": "4406:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 449,
                                "name": "_tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 436,
                                "src": "4459:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 448,
                              "name": "_getExperienceLevel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 398,
                              "src": "4439:19:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 450,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4439:33:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 451,
                            "name": "_svgCont_Mid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "4493:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 454,
                                "name": "_tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 436,
                                "src": "4541:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 452,
                                "name": "Strings",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1708,
                                "src": "4524:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Strings_$1708_$",
                                  "typeString": "type(library Strings)"
                                }
                              },
                              "id": 453,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1570,
                              "src": "4524:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 455,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4524:30:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 456,
                            "name": "_svgCont_End",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 320,
                            "src": "4573:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 445,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4371:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4371:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 457,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4371:230:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 443,
                        "name": "Base64",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1482,
                        "src": "4357:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Base64_$1482_$",
                          "typeString": "type(library Base64)"
                        }
                      },
                      "id": 444,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encode",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1481,
                      "src": "4357:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (string memory)"
                      }
                    },
                    "id": 458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4357:245:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4326:276:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "646174613a696d6167652f7376672b786d6c3b6261736536342c",
                            "id": 464,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4646:28:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                              "typeString": "literal_string \"data:image/svg+xml;base64,\""
                            },
                            "value": "data:image/svg+xml;base64,"
                          },
                          {
                            "id": 465,
                            "name": "_returning_svg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 442,
                            "src": "4676:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_f90ae014c41cb48231e1f02c314087ff9c479133697911d25c5fe231e237dd14",
                              "typeString": "literal_string \"data:image/svg+xml;base64,\""
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 462,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4629:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 463,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4629:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 466,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4629:62:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 461,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4622:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 460,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4622:6:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4622:70:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 440,
                  "id": 468,
                  "nodeType": "Return",
                  "src": "4615:77:3"
                }
              ]
            },
            "functionSelector": "35270015",
            "id": 470,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "callthisForImage",
            "nameLocation": "4240:16:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 436,
                  "mutability": "mutable",
                  "name": "_tokenAmount",
                  "nameLocation": "4265:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 470,
                  "src": "4257:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4257:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4256:22:3"
            },
            "returnParameters": {
              "id": 440,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 439,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 470,
                  "src": "4300:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 438,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4300:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4299:15:3"
            },
            "scope": 539,
            "src": "4231:470:3",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 537,
              "nodeType": "Block",
              "src": "5261:1480:3",
              "statements": [
                {
                  "assignments": [
                    483
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 483,
                      "mutability": "mutable",
                      "name": "_imgUrl",
                      "nameLocation": "5344:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 537,
                      "src": "5330:21:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 482,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "5330:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 487,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 485,
                        "name": "_tokenAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 475,
                        "src": "5373:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 484,
                      "name": "_base64EncodeImage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 434,
                      "src": "5354:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (string memory)"
                      }
                    },
                    "id": 486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5354:32:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5330:56:3"
                },
                {
                  "assignments": [
                    489
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 489,
                      "mutability": "mutable",
                      "name": "_expLevel",
                      "nameLocation": "5489:9:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 537,
                      "src": "5475:23:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 488,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "5475:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 493,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 491,
                        "name": "_tokenAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 475,
                        "src": "5521:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 490,
                      "name": "_getExperienceLevel",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 398,
                      "src": "5501:19:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (string memory)"
                      }
                    },
                    "id": 492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5501:33:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5475:59:3"
                },
                {
                  "assignments": [
                    495
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 495,
                      "mutability": "mutable",
                      "name": "_metaJson_start",
                      "nameLocation": "5793:15:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 537,
                      "src": "5780:28:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 494,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5780:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 509,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "7b20226e616d65223a2022455850657269656e6365204e4654202d20",
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5842:30:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_be6cb94e91203051256ab5d25376fcc2ae93474b1ba99bee2fd0b351797a64a9",
                          "typeString": "literal_string \"{ \"name\": \"EXPerience NFT - \""
                        },
                        "value": "{ \"name\": \"EXPerience NFT - "
                      },
                      {
                        "arguments": [
                          {
                            "id": 501,
                            "name": "_nftID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 473,
                            "src": "5904:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 499,
                            "name": "Strings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1708,
                            "src": "5887:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Strings_$1708_$",
                              "typeString": "type(library Strings)"
                            }
                          },
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "toString",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1570,
                          "src": "5887:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5887:24:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "226465736372697074696f6e223a2022455850657269656e6365204e46542e2050617274206f662045746865726e6175742044414f20626f756e746965732e20536f756c626f756e6420746f6b656e2f617373657420657870657269656e6365207468726f7567682045585020546f6b656e20616e6420455850657269656e6365204e46542e",
                        "id": 503,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5926:136:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9348ab55083754069e051b872711886f824b4955e07be7796592ca8d7918dbd8",
                          "typeString": "literal_string \"\"description\": \"EXPerience NFT. Part of Ethernaut DAO bounties. Soulbound token/asset experience through EXP Token and EXPerience NFT.\""
                        },
                        "value": "\"description\": \"EXPerience NFT. Part of Ethernaut DAO bounties. Soulbound token/asset experience through EXP Token and EXPerience NFT."
                      },
                      {
                        "hexValue": "222c202265787465726e616c5f75726c223a202268747470733a2f2f6769746875622e636f6d2f536f6c4465762d48502f455850657269656e63655f47616d6522",
                        "id": 504,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6077:67:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d6665314d79ae6557cc61c5d7ed0d1ef001f4a30a09230830816daeb1228a14c",
                          "typeString": "literal_string \"\", \"external_url\": \"https://github.com/SolDev-HP/EXPerience_Game\"\""
                        },
                        "value": "\", \"external_url\": \"https://github.com/SolDev-HP/EXPerience_Game\""
                      },
                      {
                        "hexValue": "2c202261747472696275746573223a205b7b2274726169745f74797065223a2022455850657269656e6365204c6576656c222c202276616c7565223a2022",
                        "id": 505,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6159:64:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_133c49d2960d90d0086d7b8ba0015723e15aeb586d898210a35921aca7bb96de",
                          "typeString": "literal_string \", \"attributes\": [{\"trait_type\": \"EXPerience Level\", \"value\": \"\""
                        },
                        "value": ", \"attributes\": [{\"trait_type\": \"EXPerience Level\", \"value\": \""
                      },
                      {
                        "id": 506,
                        "name": "_expLevel",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 489,
                        "src": "6238:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "227d5d2c20226f776e6572223a2022",
                        "id": 507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6262:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_063bb6ccfdb8ed7b891fa2ad13966881c41207a48059175e819b7e5d2ba34064",
                          "typeString": "literal_string \"\"}], \"owner\": \"\""
                        },
                        "value": "\"}], \"owner\": \""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_be6cb94e91203051256ab5d25376fcc2ae93474b1ba99bee2fd0b351797a64a9",
                          "typeString": "literal_string \"{ \"name\": \"EXPerience NFT - \""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9348ab55083754069e051b872711886f824b4955e07be7796592ca8d7918dbd8",
                          "typeString": "literal_string \"\"description\": \"EXPerience NFT. Part of Ethernaut DAO bounties. Soulbound token/asset experience through EXP Token and EXPerience NFT.\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d6665314d79ae6557cc61c5d7ed0d1ef001f4a30a09230830816daeb1228a14c",
                          "typeString": "literal_string \"\", \"external_url\": \"https://github.com/SolDev-HP/EXPerience_Game\"\""
                        },
                        {
                          "typeIdentifier": "t_stringliteral_133c49d2960d90d0086d7b8ba0015723e15aeb586d898210a35921aca7bb96de",
                          "typeString": "literal_string \", \"attributes\": [{\"trait_type\": \"EXPerience Level\", \"value\": \"\""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_063bb6ccfdb8ed7b891fa2ad13966881c41207a48059175e819b7e5d2ba34064",
                          "typeString": "literal_string \"\"}], \"owner\": \"\""
                        }
                      ],
                      "expression": {
                        "id": 496,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "5811:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 497,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "src": "5811:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5811:479:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5780:510:3"
                },
                {
                  "assignments": [
                    511
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 511,
                      "mutability": "mutable",
                      "name": "_metaJson_end",
                      "nameLocation": "6316:13:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 537,
                      "src": "6303:26:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 510,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6303:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 522,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 514,
                        "name": "_metaJson_start",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 495,
                        "src": "6363:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "id": 515,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 477,
                        "src": "6393:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "222c2022696d616765223a2022",
                        "id": 516,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6414:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8d0de490dde571af103e878aa265925a94dd83b4f74e62b617db5ad43a4f76af",
                          "typeString": "literal_string \"\", \"image\": \"\""
                        },
                        "value": "\", \"image\": \""
                      },
                      {
                        "id": 517,
                        "name": "_imgUrl",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 483,
                        "src": "6444:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "222c2022616e696d6174696f6e5f75726c223a2022",
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6466:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f900c545a58378754ad8b5c331b48c15e2a79c6ef80b3dc97d883d860e9e1c18",
                          "typeString": "literal_string \"\", \"animation_url\": \"\""
                        },
                        "value": "\", \"animation_url\": \""
                      },
                      {
                        "id": 519,
                        "name": "_imgUrl",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 483,
                        "src": "6504:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "227d",
                        "id": 520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6526:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                          "typeString": "literal_string \"\"}\""
                        },
                        "value": "\"}"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8d0de490dde571af103e878aa265925a94dd83b4f74e62b617db5ad43a4f76af",
                          "typeString": "literal_string \"\", \"image\": \"\""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f900c545a58378754ad8b5c331b48c15e2a79c6ef80b3dc97d883d860e9e1c18",
                          "typeString": "literal_string \"\", \"animation_url\": \"\""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                          "typeString": "literal_string \"\"}\""
                        }
                      ],
                      "expression": {
                        "id": 512,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "6332:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 513,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "src": "6332:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 521,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6332:209:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6303:238:3"
                },
                {
                  "expression": {
                    "id": 535,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 523,
                      "name": "tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 480,
                      "src": "6562:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c",
                              "id": 528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6629:31:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                "typeString": "literal_string \"data:application/json;base64,\""
                              },
                              "value": "data:application/json;base64,"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 531,
                                  "name": "_metaJson_end",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 511,
                                  "src": "6693:13:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 529,
                                  "name": "Base64",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1482,
                                  "src": "6679:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Base64_$1482_$",
                                    "typeString": "type(library Base64)"
                                  }
                                },
                                "id": 530,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "encode",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1481,
                                "src": "6679:13:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                  "typeString": "function (bytes memory) pure returns (string memory)"
                                }
                              },
                              "id": 532,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6679:28:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                "typeString": "literal_string \"data:application/json;base64,\""
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 526,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "6594:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 527,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "6594:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6594:128:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6573:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 524,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6573:6:3",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 534,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6573:160:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "6562:171:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 536,
                  "nodeType": "ExpressionStatement",
                  "src": "6562:171:3"
                }
              ]
            },
            "documentation": {
              "id": 471,
              "nodeType": "StructuredDocumentation",
              "src": "4970:157:3",
              "text": "@param _nftID - NFT token ID for which this function call is happening \n @param _tokenAmount - Value of total EXP Token the owner of the NFT has "
            },
            "id": 538,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_generateTokenURI",
            "nameLocation": "5142:17:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 473,
                  "mutability": "mutable",
                  "name": "_nftID",
                  "nameLocation": "5168:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 538,
                  "src": "5160:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5160:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "_tokenAmount",
                  "nameLocation": "5184:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 538,
                  "src": "5176:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5176:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 477,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "5206:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 538,
                  "src": "5198:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 476,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5198:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5159:54:3"
            },
            "returnParameters": {
              "id": 481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 480,
                  "mutability": "mutable",
                  "name": "tokenURI",
                  "nameLocation": "5251:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 538,
                  "src": "5237:22:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 479,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5237:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5236:24:3"
            },
            "scope": 539,
            "src": "5133:1608:3",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 540,
        "src": "275:6469:3",
        "usedErrors": []
      }
    ],
    "src": "33:6711:3"
  },
  "bytecode": "610ef561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063352700151461003a575b600080fd5b61004d6100483660046104a1565b610063565b60405161005a91906104ea565b60405180910390f35b606060006100f260405180610760016040528061073881526020016106dd610738913961008f8561011c565b6040518060a00160405280606b8152602001610e55606b91396100b187610245565b6040518060600160405280602881526020016106b5602891396040516020016100de95949392919061051d565b60405160208183030381529060405261034e565b9050806040516020016101059190610588565b604051602081830303815290604052915050919050565b606060008211801561013757506801158e460913d000008211155b156101595750506040805180820190915260018152604960f81b602082015290565b6801158e460913d000008211801561017a575068022b1c8c1227a000008211155b1561019d575050604080518082019091526002815261494960f01b602082015290565b68022b1c8c1227a00000821180156101be5750680340aad21b3b7000008211155b156101e257505060408051808201909152600381526249494960e81b602082015290565b680340aad21b3b7000008211801561020357506804563918244f4000008211155b1561022657505060408051808201909152600281526124ab60f11b602082015290565b50506040805180820190915260038152622d472d60e81b602082015290565b60608160000361026c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102965780610280816105e3565b915061028f9050600a83610612565b9150610270565b60008167ffffffffffffffff8111156102b1576102b1610626565b6040519080825280601f01601f1916602001820160405280156102db576020820181803683370190505b5090505b8415610346576102f060018361063c565b91506102fd600a86610653565b610308906030610667565b60f81b81838151811061031d5761031d61067f565b60200101906001600160f81b031916908160001a90535061033f600a86610612565b94506102df565b949350505050565b6060815160000361036d57505060408051602081019091526000815290565b6000604051806060016040528060408152602001610e15604091399050600060038451600261039c9190610667565b6103a69190610612565b6103b1906004610695565b67ffffffffffffffff8111156103c9576103c9610626565b6040519080825280601f01601f1916602001820160405280156103f3576020820181803683370190505b509050600182016020820185865187015b8082101561045f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610404565b505060038651066001811461047b576002811461048e57610496565b603d6001830353603d6002830353610496565b603d60018303535b509195945050505050565b6000602082840312156104b357600080fd5b5035919050565b60005b838110156104d55781810151838201526020016104bd565b838111156104e4576000848401525b50505050565b60208152600082518060208401526105098160408501602087016104ba565b601f01601f19169190910160400192915050565b6000865161052f818460208b016104ba565b865190830190610543818360208b016104ba565b8651910190610556818360208a016104ba565b85519101906105698183602089016104ba565b845191019061057c8183602088016104ba565b01979650505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516105c081601a8501602087016104ba565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105f5576105f56105cd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610621576106216105fc565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561064e5761064e6105cd565b500390565b600082610662576106626105fc565b500690565b6000821982111561067a5761067a6105cd565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156106af576106af6105cd565b50029056fe3c2f6469763e3c2f6469763e3c2f6469763e3c2f666f726569676e4f626a6563743e3c2f7376673e3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222076696577426f783d223020302033303020333030223e203c7374796c6520747970653d22746578742f637373223e203c215b43444154415b202a2c202a3a6265666f72652c202a3a6166746572207b20626f782d73697a696e673a20626f726465722d626f783b7d20626f6479207b206865696768743a2031303076683b206261636b67726f756e643a20233030303b7d202e63656e746572207b206865696768743a20313030253b20646973706c61793a20666c65783b20616c69676e2d6974656d733a2063656e7465723b206a7573746966792d636f6e74656e743a2063656e7465723b20746578742d616c69676e3a2063656e7465723b7d202e636972636c65207b20706f736974696f6e3a2072656c61746976653b2077696474683a2032303070783b206865696768743a2032303070783b20636f6c6f723a20236666663b206261636b67726f756e643a20233030303b20626f726465722d7261646975733a203530253b20626f726465723a2032707820736f6c69643b7d202e6c6f676f207b20666f6e742d73697a653a2031323570783b206c696e652d6865696768743a2031393070783b20766572746963616c2d616c69676e3a206d6964646c653b7d202e627574746f6e207b20706f736974696f6e3a206162736f6c7574653b20626f74746f6d3a203070783b206c6566743a20303b2072696768743a20303b2070616464696e673a203870783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b206261636b67726f756e643a20233030303b20626f726465723a2032707820736f6c69643b20616e696d6174696f6e3a20736c69646520312e347320656173652d696e2d6f757420696e66696e6974653b20637572736f723a20706f696e7465723b7d202e627574746f6e3a686f766572207b20636f6c6f723a20233030303b206261636b67726f756e643a20236666663b20626f726465722d636f6c6f723a20236666663b7d20406b65796672616d657320736c696465207b203025207b207472616e73666f726d3a207472616e736c61746558283130707829207d20353025207b7472616e73666f726d3a207472616e736c61746558282d3130707829207d2031303025207b207472616e73666f726d3a207472616e736c61746558283130707829207d7d202e74657874207b20706f736974696f6e3a206162736f6c7574653b20746f703a20303b206c6566743a20303b2077696474683a20313030253b206865696768743a20313030253b20666f6e742d73697a653a20323470783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b20616e696d6174696f6e3a20726f7461746520313473206c696e65617220696e66696e6974653b2066696c6c3a20236666663b7d20406b65796672616d657320726f74617465207b2066726f6d207b207472616e73666f726d3a20726f746174652830293b207d20746f207b207472616e73666f726d3a20726f7461746528333630646567293b207d7d205d5d3e203c2f7374796c653e203c666f726569676e4f626a65637420783d2232302220793d223230222077696474683d2233303022206865696768743d22333030223e203c64697620636c6173733d2263656e7465722220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d22636972636c652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d226c6f676f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e49493c2f6469763e3c64697620636c6173733d22746578742220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e20203c73766720783d22302220793d2230222076696577426f783d2230203020333030203330302220656e61626c652d6261636b67726f756e643d226e65772030203020333030203330302220786d6c3a73706163653d2270726573657276652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e203c646566733e203c706174682069643d22636972636c65506174682220643d22204d203135302c20313530206d202d3132302c20302061203132302c313230203020302c31203234302c302061203132302c313230203020302c31202d3234302c30202220202f3e203c2f646566733e203c673e203c746578743e203c746578745061746820687265663d2223636972636c65506174682220786d6c3a73706163653d227072657365727665223e455850657269656e6365204e465421202020202020202020466f722e45746865726e61757444414f2020202020202020204c6576656c202d204142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c2f74657874506174683e3c2f746578743e3c2f673e3c2f7376673e3c2f6469763e3c64697620636c6173733d22627574746f6e2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e5b4558505d2042616c616e6365202d20a2646970667358221220d0a13ec9e72eded15f7f103410b6d5be7198885220195e51a50b95bd8925407564736f6c634300080d0033",
  "bytecodeSha1": "065aaaccb93b1294fcf24706a0d568bc2b5faf3b",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "BadgeFactory",
  "coverageMap": {
    "branches": {
      "3": {
        "BadgeFactory._getExperienceLevel": {
          "15": [
            3006,
            3022,
            false
          ],
          "16": [
            3026,
            3055,
            false
          ],
          "17": [
            3099,
            3127,
            false
          ],
          "18": [
            3131,
            3160,
            false
          ],
          "19": [
            3205,
            3233,
            false
          ],
          "20": [
            3237,
            3266,
            false
          ],
          "21": [
            3312,
            3340,
            false
          ],
          "22": [
            3344,
            3373,
            false
          ]
        }
      },
      "5": {
        "Base64.encode": {
          "23": [
            820,
            836,
            false
          ]
        }
      },
      "8": {
        "Strings.toString": {
          "24": [
            670,
            680,
            false
          ]
        }
      }
    },
    "statements": {
      "3": {
        "BadgeFactory._getExperienceLevel": {
          "1": [
            3070,
            3080
          ],
          "2": [
            3175,
            3186
          ],
          "3": [
            3281,
            3293
          ],
          "4": [
            3388,
            3399
          ],
          "5": [
            3429,
            3441
          ]
        },
        "BadgeFactory.callthisForImage": {
          "0": [
            4615,
            4692
          ]
        }
      },
      "5": {
        "Base64.encode": {
          "13": [
            838,
            847
          ],
          "14": [
            3557,
            3570
          ]
        }
      },
      "8": {
        "Strings.toString": {
          "6": [
            697,
            707
          ],
          "7": [
            818,
            826
          ],
          "8": [
            841,
            851
          ],
          "9": [
            957,
            968
          ],
          "10": [
            983,
            1039
          ],
          "11": [
            1054,
            1065
          ],
          "12": [
            1087,
            1108
          ]
        }
      }
    }
  },
  "dependencies": [
    "Base64",
    "Strings"
  ],
  "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063352700151461003a575b600080fd5b61004d6100483660046104a1565b610063565b60405161005a91906104ea565b60405180910390f35b606060006100f260405180610760016040528061073881526020016106dd610738913961008f8561011c565b6040518060a00160405280606b8152602001610e55606b91396100b187610245565b6040518060600160405280602881526020016106b5602891396040516020016100de95949392919061051d565b60405160208183030381529060405261034e565b9050806040516020016101059190610588565b604051602081830303815290604052915050919050565b606060008211801561013757506801158e460913d000008211155b156101595750506040805180820190915260018152604960f81b602082015290565b6801158e460913d000008211801561017a575068022b1c8c1227a000008211155b1561019d575050604080518082019091526002815261494960f01b602082015290565b68022b1c8c1227a00000821180156101be5750680340aad21b3b7000008211155b156101e257505060408051808201909152600381526249494960e81b602082015290565b680340aad21b3b7000008211801561020357506804563918244f4000008211155b1561022657505060408051808201909152600281526124ab60f11b602082015290565b50506040805180820190915260038152622d472d60e81b602082015290565b60608160000361026c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102965780610280816105e3565b915061028f9050600a83610612565b9150610270565b60008167ffffffffffffffff8111156102b1576102b1610626565b6040519080825280601f01601f1916602001820160405280156102db576020820181803683370190505b5090505b8415610346576102f060018361063c565b91506102fd600a86610653565b610308906030610667565b60f81b81838151811061031d5761031d61067f565b60200101906001600160f81b031916908160001a90535061033f600a86610612565b94506102df565b949350505050565b6060815160000361036d57505060408051602081019091526000815290565b6000604051806060016040528060408152602001610e15604091399050600060038451600261039c9190610667565b6103a69190610612565b6103b1906004610695565b67ffffffffffffffff8111156103c9576103c9610626565b6040519080825280601f01601f1916602001820160405280156103f3576020820181803683370190505b509050600182016020820185865187015b8082101561045f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610404565b505060038651066001811461047b576002811461048e57610496565b603d6001830353603d6002830353610496565b603d60018303535b509195945050505050565b6000602082840312156104b357600080fd5b5035919050565b60005b838110156104d55781810151838201526020016104bd565b838111156104e4576000848401525b50505050565b60208152600082518060208401526105098160408501602087016104ba565b601f01601f19169190910160400192915050565b6000865161052f818460208b016104ba565b865190830190610543818360208b016104ba565b8651910190610556818360208a016104ba565b85519101906105698183602089016104ba565b845191019061057c8183602088016104ba565b01979650505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516105c081601a8501602087016104ba565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105f5576105f56105cd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610621576106216105fc565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561064e5761064e6105cd565b500390565b600082610662576106626105fc565b500690565b6000821982111561067a5761067a6105cd565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156106af576106af6105cd565b50029056fe3c2f6469763e3c2f6469763e3c2f6469763e3c2f666f726569676e4f626a6563743e3c2f7376673e3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222076696577426f783d223020302033303020333030223e203c7374796c6520747970653d22746578742f637373223e203c215b43444154415b202a2c202a3a6265666f72652c202a3a6166746572207b20626f782d73697a696e673a20626f726465722d626f783b7d20626f6479207b206865696768743a2031303076683b206261636b67726f756e643a20233030303b7d202e63656e746572207b206865696768743a20313030253b20646973706c61793a20666c65783b20616c69676e2d6974656d733a2063656e7465723b206a7573746966792d636f6e74656e743a2063656e7465723b20746578742d616c69676e3a2063656e7465723b7d202e636972636c65207b20706f736974696f6e3a2072656c61746976653b2077696474683a2032303070783b206865696768743a2032303070783b20636f6c6f723a20236666663b206261636b67726f756e643a20233030303b20626f726465722d7261646975733a203530253b20626f726465723a2032707820736f6c69643b7d202e6c6f676f207b20666f6e742d73697a653a2031323570783b206c696e652d6865696768743a2031393070783b20766572746963616c2d616c69676e3a206d6964646c653b7d202e627574746f6e207b20706f736974696f6e3a206162736f6c7574653b20626f74746f6d3a203070783b206c6566743a20303b2072696768743a20303b2070616464696e673a203870783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b206261636b67726f756e643a20233030303b20626f726465723a2032707820736f6c69643b20616e696d6174696f6e3a20736c69646520312e347320656173652d696e2d6f757420696e66696e6974653b20637572736f723a20706f696e7465723b7d202e627574746f6e3a686f766572207b20636f6c6f723a20233030303b206261636b67726f756e643a20236666663b20626f726465722d636f6c6f723a20236666663b7d20406b65796672616d657320736c696465207b203025207b207472616e73666f726d3a207472616e736c61746558283130707829207d20353025207b7472616e73666f726d3a207472616e736c61746558282d3130707829207d2031303025207b207472616e73666f726d3a207472616e736c61746558283130707829207d7d202e74657874207b20706f736974696f6e3a206162736f6c7574653b20746f703a20303b206c6566743a20303b2077696474683a20313030253b206865696768743a20313030253b20666f6e742d73697a653a20323470783b20666f6e742d7765696768743a20626f6c643b20746578742d7472616e73666f726d3a207570706572636173653b20616e696d6174696f6e3a20726f7461746520313473206c696e65617220696e66696e6974653b2066696c6c3a20236666663b7d20406b65796672616d657320726f74617465207b2066726f6d207b207472616e73666f726d3a20726f746174652830293b207d20746f207b207472616e73666f726d3a20726f7461746528333630646567293b207d7d205d5d3e203c2f7374796c653e203c666f726569676e4f626a65637420783d2232302220793d223230222077696474683d2233303022206865696768743d22333030223e203c64697620636c6173733d2263656e7465722220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d22636972636c652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e3c64697620636c6173733d226c6f676f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e49493c2f6469763e3c64697620636c6173733d22746578742220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e20203c73766720783d22302220793d2230222076696577426f783d2230203020333030203330302220656e61626c652d6261636b67726f756e643d226e65772030203020333030203330302220786d6c3a73706163653d2270726573657276652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e203c646566733e203c706174682069643d22636972636c65506174682220643d22204d203135302c20313530206d202d3132302c20302061203132302c313230203020302c31203234302c302061203132302c313230203020302c31202d3234302c30202220202f3e203c2f646566733e203c673e203c746578743e203c746578745061746820687265663d2223636972636c65506174682220786d6c3a73706163653d227072657365727665223e455850657269656e6365204e465421202020202020202020466f722e45746865726e61757444414f2020202020202020204c6576656c202d204142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c2f74657874506174683e3c2f746578743e3c2f673e3c2f7376673e3c2f6469763e3c64697620636c6173733d22627574746f6e2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e5b4558505d2042616c616e6365202d20a2646970667358221220d0a13ec9e72eded15f7f103410b6d5be7198885220195e51a50b95bd8925407564736f6c634300080d0033",
  "deployedSourceMap": "275:6469:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;4231:470;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;4300:13;4326:28;4357:245;4406:14;;;;;;;;;;;;;;;;;4439:33;4459:12;4439:19;:33::i;:::-;4493:12;;;;;;;;;;;;;;;;;4524:30;4541:12;4524:16;:30::i;:::-;4573:12;;;;;;;;;;;;;;;;;4371:230;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4357:13;:245::i;:::-;4326:276;;4676:14;4629:62;;;;;;;;:::i;:::-;;;;;;;;;;;;;4615:77;;;4231:470;;;:::o;2903:546::-;2977:13;3021:1;3006:12;:16;:49;;;;;3042:13;3026:12;:29;;3006:49;3003:438;;;-1:-1:-1;;3070:10:3;;;;;;;;;;;;-1:-1:-1;;;3070:10:3;;;;;2903:546::o;3003:438::-;3114:13;3099:12;:28;:61;;;;;3147:13;3131:12;:29;;3099:61;3096:345;;;-1:-1:-1;;3175:11:3;;;;;;;;;;;;-1:-1:-1;;;3175:11:3;;;;;2903:546::o;3096:345::-;3220:13;3205:12;:28;:61;;;;;3253:13;3237:12;:29;;3205:61;3202:239;;;-1:-1:-1;;3281:12:3;;;;;;;;;;;;-1:-1:-1;;;3281:12:3;;;;;2903:546::o;3202:239::-;3327:13;3312:12;:28;:61;;;;;3360:13;3344:12;:29;;3312:61;3309:132;;;-1:-1:-1;;3388:11:3;;;;;;;;;;;;-1:-1:-1;;;3388:11:3;;;;;2903:546::o;3309:132::-;-1:-1:-1;;3429:12:3;;;;;;;;;;;;-1:-1:-1;;;3429:12:3;;;;;2903:546::o;393:723:8:-;449:13;670:5;679:1;670:10;666:53;;-1:-1:-1;;697:10:8;;;;;;;;;;;;-1:-1:-1;;;697:10:8;;;;;393:723::o;666:53::-;744:5;729:12;785:78;792:9;;785:78;;818:8;;;;:::i;:::-;;-1:-1:-1;841:10:8;;-1:-1:-1;849:2:8;841:10;;:::i;:::-;;;785:78;;;873:19;905:6;895:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;895:17:8;;873:39;;923:154;930:10;;923:154;;957:11;967:1;957:11;;:::i;:::-;;-1:-1:-1;1026:10:8;1034:2;1026:5;:10;:::i;:::-;1013:24;;:2;:24;:::i;:::-;1000:39;;983:6;990;983:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;983:56:8;;;;;;;;-1:-1:-1;1054:11:8;1063:2;1054:11;;:::i;:::-;;;923:154;;;1101:6;393:723;-1:-1:-1;;;;393:723:8:o;525:3053:5:-;583:13;820:4;:11;835:1;820:16;816:31;;-1:-1:-1;;838:9:5;;;;;;;;;-1:-1:-1;838:9:5;;;525:3053::o;816:31::-;900:19;922:6;;;;;;;;;;;;;;;;;900:28;;1339:20;1398:1;1379:4;:11;1393:1;1379:15;;;;:::i;:::-;1378:21;;;;:::i;:::-;1373:27;;:1;:27;:::i;:::-;1362:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1362:39:5;;1339:62;;1537:1;1530:5;1526:13;1641:2;1633:6;1629:15;1752:4;1804;1798:11;1792:4;1788:22;1714:1432;1838:6;1829:7;1826:19;1714:1432;;;1944:1;1935:7;1931:15;1920:26;;1983:7;1977:14;2636:4;2628:5;2624:2;2620:14;2616:25;2606:8;2602:40;2596:47;2585:9;2577:67;2690:1;2679:9;2675:17;2662:30;;2782:4;2774:5;2770:2;2766:14;2762:25;2752:8;2748:40;2742:47;2731:9;2723:67;2836:1;2825:9;2821:17;2808:30;;2927:4;2919:5;2916:1;2912:13;2908:24;2898:8;2894:39;2888:46;2877:9;2869:66;2981:1;2970:9;2966:17;2953:30;;3064:4;3057:5;3053:16;3043:8;3039:31;3033:38;3022:9;3014:58;;3118:1;3107:9;3103:17;3090:30;;1714:1432;;;1718:107;;3308:1;3301:4;3295:11;3291:19;3329:1;3324:123;;;;3466:1;3461:73;;;;3284:250;;3324:123;3377:4;3373:1;3362:9;3358:17;3350:32;3427:4;3423:1;3412:9;3408:17;3400:32;3324:123;;3461:73;3514:4;3510:1;3499:9;3495:17;3487:32;3284:250;-1:-1:-1;3564:6:5;;525:3053;-1:-1:-1;;;;;525:3053:5:o;14:180:13:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:13;;14:180;-1:-1:-1;14:180:13:o;199:258::-;271:1;281:113;295:6;292:1;289:13;281:113;;;371:11;;;365:18;352:11;;;345:39;317:2;310:10;281:113;;;412:6;409:1;406:13;403:48;;;447:1;438:6;433:3;429:16;422:27;403:48;;199:258;;;:::o;462:391::-;619:2;608:9;601:21;582:4;651:6;645:13;694:6;689:2;678:9;674:18;667:34;710:66;769:6;764:2;753:9;749:18;744:2;736:6;732:15;710:66;:::i;:::-;837:2;816:15;-1:-1:-1;;812:29:13;797:45;;;;844:2;793:54;;462:391;-1:-1:-1;;462:391:13:o;858:1052::-;1181:3;1219:6;1213:13;1235:53;1281:6;1276:3;1269:4;1261:6;1257:17;1235:53;:::i;:::-;1351:13;;1310:16;;;;1373:57;1351:13;1310:16;1407:4;1395:17;;1373:57;:::i;:::-;1497:13;;1452:20;;;1519:57;1497:13;1452:20;1553:4;1541:17;;1519:57;:::i;:::-;1643:13;;1598:20;;;1665:57;1643:13;1598:20;1699:4;1687:17;;1665:57;:::i;:::-;1789:13;;1744:20;;;1811:57;1789:13;1744:20;1845:4;1833:17;;1811:57;:::i;:::-;1884:20;;858:1052;-1:-1:-1;;;;;;;858:1052:13:o;1915:445::-;2177:28;2172:3;2165:41;2147:3;2235:6;2229:13;2251:62;2306:6;2301:2;2296:3;2292:12;2285:4;2277:6;2273:17;2251:62;:::i;:::-;2333:16;;;;2351:2;2329:25;;1915:445;-1:-1:-1;;1915:445:13:o;2365:127::-;2426:10;2421:3;2417:20;2414:1;2407:31;2457:4;2454:1;2447:15;2481:4;2478:1;2471:15;2497:135;2536:3;2557:17;;;2554:43;;2577:18;;:::i;:::-;-1:-1:-1;2624:1:13;2613:13;;2497:135::o;2637:127::-;2698:10;2693:3;2689:20;2686:1;2679:31;2729:4;2726:1;2719:15;2753:4;2750:1;2743:15;2769:120;2809:1;2835;2825:35;;2840:18;;:::i;:::-;-1:-1:-1;2874:9:13;;2769:120::o;2894:127::-;2955:10;2950:3;2946:20;2943:1;2936:31;2986:4;2983:1;2976:15;3010:4;3007:1;3000:15;3026:125;3066:4;3094:1;3091;3088:8;3085:34;;;3099:18;;:::i;:::-;-1:-1:-1;3136:9:13;;3026:125::o;3156:112::-;3188:1;3214;3204:35;;3219:18;;:::i;:::-;-1:-1:-1;3253:9:13;;3156:112::o;3273:128::-;3313:3;3344:1;3340:6;3337:1;3334:13;3331:39;;;3350:18;;:::i;:::-;-1:-1:-1;3386:9:13;;3273:128::o;3406:127::-;3467:10;3462:3;3458:20;3455:1;3448:31;3498:4;3495:1;3488:15;3522:4;3519:1;3512:15;3538:168;3578:7;3644:1;3640;3636:6;3632:14;3629:1;3626:21;3621:1;3614:9;3607:17;3603:45;3600:71;;;3651:18;;:::i;:::-;-1:-1:-1;3691:9:13;;3538:168::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    275,
    6744
  ],
  "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x35270015 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A1 JUMP JUMPDEST PUSH2 0x63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A SWAP2 SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xF2 PUSH1 0x40 MLOAD DUP1 PUSH2 0x760 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x738 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6DD PUSH2 0x738 SWAP2 CODECOPY PUSH2 0x8F DUP6 PUSH2 0x11C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6B DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE55 PUSH1 0x6B SWAP2 CODECOPY PUSH2 0xB1 DUP8 PUSH2 0x245 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6B5 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x51D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x34E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0x588 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x137 JUMPI POP PUSH9 0x1158E460913D00000 DUP3 GT ISZERO JUMPDEST ISZERO PUSH2 0x159 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x49 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH9 0x1158E460913D00000 DUP3 GT DUP1 ISZERO PUSH2 0x17A JUMPI POP PUSH9 0x22B1C8C1227A00000 DUP3 GT ISZERO JUMPDEST ISZERO PUSH2 0x19D JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x4949 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH9 0x22B1C8C1227A00000 DUP3 GT DUP1 ISZERO PUSH2 0x1BE JUMPI POP PUSH9 0x340AAD21B3B700000 DUP3 GT ISZERO JUMPDEST ISZERO PUSH2 0x1E2 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x494949 PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH9 0x340AAD21B3B700000 DUP3 GT DUP1 ISZERO PUSH2 0x203 JUMPI POP PUSH9 0x4563918244F400000 DUP3 GT ISZERO JUMPDEST ISZERO PUSH2 0x226 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH2 0x24AB PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x2D472D PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x26C JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x296 JUMPI DUP1 PUSH2 0x280 DUP2 PUSH2 0x5E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x28F SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x612 JUMP JUMPDEST SWAP2 POP PUSH2 0x270 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2DB JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x346 JUMPI PUSH2 0x2F0 PUSH1 0x1 DUP4 PUSH2 0x63C JUMP JUMPDEST SWAP2 POP PUSH2 0x2FD PUSH1 0xA DUP7 PUSH2 0x653 JUMP JUMPDEST PUSH2 0x308 SWAP1 PUSH1 0x30 PUSH2 0x667 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x31D JUMPI PUSH2 0x31D PUSH2 0x67F JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x33F PUSH1 0xA DUP7 PUSH2 0x612 JUMP JUMPDEST SWAP5 POP PUSH2 0x2DF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x36D JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE15 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP5 MLOAD PUSH1 0x2 PUSH2 0x39C SWAP2 SWAP1 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x612 JUMP JUMPDEST PUSH2 0x3B1 SWAP1 PUSH1 0x4 PUSH2 0x695 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C9 JUMPI PUSH2 0x3C9 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x404 JUMP JUMPDEST POP POP PUSH1 0x3 DUP7 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x47B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x48E JUMPI PUSH2 0x496 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 PUSH1 0x3D PUSH1 0x2 DUP4 SUB MSTORE8 PUSH2 0x496 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4D5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4BD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x509 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD PUSH2 0x52F DUP2 DUP5 PUSH1 0x20 DUP12 ADD PUSH2 0x4BA JUMP JUMPDEST DUP7 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x543 DUP2 DUP4 PUSH1 0x20 DUP12 ADD PUSH2 0x4BA JUMP JUMPDEST DUP7 MLOAD SWAP2 ADD SWAP1 PUSH2 0x556 DUP2 DUP4 PUSH1 0x20 DUP11 ADD PUSH2 0x4BA JUMP JUMPDEST DUP6 MLOAD SWAP2 ADD SWAP1 PUSH2 0x569 DUP2 DUP4 PUSH1 0x20 DUP10 ADD PUSH2 0x4BA JUMP JUMPDEST DUP5 MLOAD SWAP2 ADD SWAP1 PUSH2 0x57C DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x4BA JUMP JUMPDEST ADD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x5C0 DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4BA JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1A ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5F5 JUMPI PUSH2 0x5F5 PUSH2 0x5CD JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x621 JUMPI PUSH2 0x621 PUSH2 0x5FC JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x64E JUMPI PUSH2 0x64E PUSH2 0x5CD JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x662 JUMPI PUSH2 0x662 PUSH2 0x5FC JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x67A JUMPI PUSH2 0x67A PUSH2 0x5CD JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x6AF JUMPI PUSH2 0x6AF PUSH2 0x5CD JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID EXTCODECOPY 0x2F PUSH5 0x69763E3C2F PUSH5 0x69763E3C2F PUSH5 0x69763E3C2F PUSH7 0x6F726569676E4F PUSH3 0x6A6563 PUSH21 0x3E3C2F7376673E3C73766720786D6C6E733D226874 PUSH21 0x703A2F2F7777772E77332E6F72672F323030302F73 PUSH23 0x67222076696577426F783D223020302033303020333030 0x22 RETURNDATACOPY KECCAK256 EXTCODECOPY PUSH20 0x74796C6520747970653D22746578742F63737322 RETURNDATACOPY KECCAK256 EXTCODECOPY 0x21 JUMPDEST NUMBER DIFFICULTY COINBASE SLOAD COINBASE JUMPDEST KECCAK256 0x2A 0x2C KECCAK256 0x2A GASPRICE PUSH3 0x65666F PUSH19 0x652C202A3A6166746572207B20626F782D7369 PUSH27 0x696E673A20626F726465722D626F783B7D20626F6479207B206865 PUSH10 0x6768743A203130307668 EXTCODESIZE KECCAK256 PUSH3 0x61636B PUSH8 0x726F756E643A2023 ADDRESS ADDRESS ADDRESS EXTCODESIZE PUSH30 0x202E63656E746572207B206865696768743A20313030253B20646973706C PUSH2 0x793A KECCAK256 PUSH7 0x6C65783B20616C PUSH10 0x676E2D6974656D733A20 PUSH4 0x656E7465 PUSH19 0x3B206A7573746966792D636F6E74656E743A20 PUSH4 0x656E7465 PUSH19 0x3B20746578742D616C69676E3A2063656E7465 PUSH19 0x3B7D202E636972636C65207B20706F73697469 PUSH16 0x6E3A2072656C61746976653B20776964 PUSH21 0x683A2032303070783B206865696768743A20323030 PUSH17 0x783B20636F6C6F723A20236666663B2062 PUSH2 0x636B PUSH8 0x726F756E643A2023 ADDRESS ADDRESS ADDRESS EXTCODESIZE KECCAK256 PUSH3 0x6F7264 PUSH6 0x722D72616469 PUSH22 0x733A203530253B20626F726465723A2032707820736F PUSH13 0x69643B7D202E6C6F676F207B20 PUSH7 0x6F6E742D73697A PUSH6 0x3A2031323570 PUSH25 0x3B206C696E652D6865696768743A2031393070783B20766572 PUSH21 0x6963616C2D616C69676E3A206D6964646C653B7D20 0x2E PUSH3 0x757474 PUSH16 0x6E207B20706F736974696F6E3A206162 PUSH20 0x6F6C7574653B20626F74746F6D3A203070783B20 PUSH13 0x6566743A20303B207269676874 GASPRICE KECCAK256 ADDRESS EXTCODESIZE KECCAK256 PUSH17 0x616464696E673A203870783B20666F6E74 0x2D PUSH24 0x65696768743A20626F6C643B20746578742D7472616E7366 PUSH16 0x726D3A207570706572636173653B2062 PUSH2 0x636B PUSH8 0x726F756E643A2023 ADDRESS ADDRESS ADDRESS EXTCODESIZE KECCAK256 PUSH3 0x6F7264 PUSH6 0x723A20327078 KECCAK256 PUSH20 0x6F6C69643B20616E696D6174696F6E3A20736C69 PUSH5 0x6520312E34 PUSH20 0x20656173652D696E2D6F757420696E66696E6974 PUSH6 0x3B2063757273 PUSH16 0x723A20706F696E7465723B7D202E6275 PUSH21 0x746F6E3A686F766572207B20636F6C6F723A202330 ADDRESS ADDRESS EXTCODESIZE KECCAK256 PUSH3 0x61636B PUSH8 0x726F756E643A2023 PUSH7 0x66663B20626F72 PUSH5 0x65722D636F PUSH13 0x6F723A20236666663B7D20406B PUSH6 0x796672616D65 PUSH20 0x20736C696465207B203025207B207472616E7366 PUSH16 0x726D3A207472616E736C617465582831 ADDRESS PUSH17 0x7829207D20353025207B7472616E73666F PUSH19 0x6D3A207472616E736C61746558282D31307078 0x29 KECCAK256 PUSH30 0x2031303025207B207472616E73666F726D3A207472616E736C6174655828 BALANCE ADDRESS PUSH17 0x7829207D7D202E74657874207B20706F73 PUSH10 0x74696F6E3A206162736F PUSH13 0x7574653B20746F703A20303B20 PUSH13 0x6566743A20303B207769647468 GASPRICE KECCAK256 BALANCE ADDRESS ADDRESS 0x25 EXTCODESIZE KECCAK256 PUSH9 0x65696768743A203130 ADDRESS 0x25 EXTCODESIZE KECCAK256 PUSH7 0x6F6E742D73697A PUSH6 0x3A2032347078 EXTCODESIZE KECCAK256 PUSH7 0x6F6E742D776569 PUSH8 0x68743A20626F6C64 EXTCODESIZE KECCAK256 PUSH21 0x6578742D7472616E73666F726D3A20757070657263 PUSH2 0x7365 EXTCODESIZE KECCAK256 PUSH2 0x6E69 PUSH14 0x6174696F6E3A20726F7461746520 BALANCE CALLVALUE PUSH20 0x206C696E65617220696E66696E6974653B206669 PUSH13 0x6C3A20236666663B7D20406B65 PUSH26 0x6672616D657320726F74617465207B2066726F6D207B20747261 PUSH15 0x73666F726D3A20726F746174652830 0x29 EXTCODESIZE KECCAK256 PUSH30 0x20746F207B207472616E73666F726D3A20726F7461746528333630646567 0x29 EXTCODESIZE KECCAK256 PUSH30 0x7D205D5D3E203C2F7374796C653E203C666F726569676E4F626A65637420 PUSH25 0x3D2232302220793D223230222077696474683D223330302220 PUSH9 0x65696768743D223330 ADDRESS 0x22 RETURNDATACOPY KECCAK256 EXTCODECOPY PUSH5 0x697620636C PUSH2 0x7373 RETURNDATASIZE 0x22 PUSH4 0x656E7465 PUSH19 0x2220786D6C6E733D22687474703A2F2F777777 0x2E PUSH24 0x332E6F72672F313939392F7868746D6C223E3C6469762063 PUSH13 0x6173733D22636972636C652220 PUSH25 0x6D6C6E733D22687474703A2F2F7777772E77332E6F72672F31 CODECOPY CODECOPY CODECOPY 0x2F PUSH25 0x68746D6C223E3C64697620636C6173733D226C6F676F222078 PUSH14 0x6C6E733D22687474703A2F2F7777 PUSH24 0x2E77332E6F72672F313939392F7868746D6C223E49493C2F PUSH5 0x69763E3C64 PUSH10 0x7620636C6173733D2274 PUSH6 0x78742220786D PUSH13 0x6E733D22687474703A2F2F7777 PUSH24 0x2E77332E6F72672F313939392F7868746D6C223E20203C73 PUSH23 0x6720783D22302220793D2230222076696577426F783D22 ADDRESS KECCAK256 ADDRESS KECCAK256 CALLER ADDRESS ADDRESS KECCAK256 CALLER ADDRESS ADDRESS 0x22 KECCAK256 PUSH6 0x6E61626C652D PUSH3 0x61636B PUSH8 0x726F756E643D226E PUSH6 0x772030203020 CALLER ADDRESS ADDRESS KECCAK256 CALLER ADDRESS ADDRESS 0x22 KECCAK256 PUSH25 0x6D6C3A73706163653D2270726573657276652220786D6C6E73 RETURNDATASIZE 0x22 PUSH9 0x7474703A2F2F777777 0x2E PUSH24 0x332E6F72672F323030302F737667223E203C646566733E20 EXTCODECOPY PUSH17 0x6174682069643D22636972636C65506174 PUSH9 0x2220643D22204D2031 CALLDATALOAD ADDRESS 0x2C KECCAK256 BALANCE CALLDATALOAD ADDRESS KECCAK256 PUSH14 0x202D3132302C2030206120313230 0x2C BALANCE ORIGIN ADDRESS KECCAK256 ADDRESS KECCAK256 ADDRESS 0x2C BALANCE KECCAK256 ORIGIN CALLVALUE ADDRESS 0x2C ADDRESS KECCAK256 PUSH2 0x2031 ORIGIN ADDRESS 0x2C BALANCE ORIGIN ADDRESS KECCAK256 ADDRESS KECCAK256 ADDRESS 0x2C BALANCE KECCAK256 0x2D ORIGIN CALLVALUE ADDRESS 0x2C ADDRESS KECCAK256 0x22 KECCAK256 KECCAK256 0x2F RETURNDATACOPY KECCAK256 EXTCODECOPY 0x2F PUSH5 0x6566733E20 EXTCODECOPY PUSH8 0x3E203C746578743E KECCAK256 EXTCODECOPY PUSH21 0x6578745061746820687265663D2223636972636C65 POP PUSH2 0x7468 0x22 KECCAK256 PUSH25 0x6D6C3A73706163653D227072657365727665223E4558506572 PUSH10 0x656E6365204E46542120 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 CHAINID PUSH16 0x722E45746865726E61757444414F2020 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 KECCAK256 0x4C PUSH6 0x76656C202D20 COINBASE TIMESTAMP NUMBER DIFFICULTY GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2F3C2F7465787450 PUSH2 0x7468 RETURNDATACOPY EXTCODECOPY 0x2F PUSH21 0x6578743E3C2F673E3C2F7376673E3C2F6469763E3C PUSH5 0x697620636C PUSH2 0x7373 RETURNDATASIZE 0x22 PUSH3 0x757474 PUSH16 0x6E2220786D6C6E733D22687474703A2F 0x2F PUSH24 0x77772E77332E6F72672F313939392F7868746D6C223E5B45 PC POP 0x5D KECCAK256 TIMESTAMP PUSH2 0x6C61 PUSH15 0x6365202D20A2646970667358221220 0xD0 LOG1 RETURNDATACOPY 0xC9 0xE7 0x2E 0xDE 0xD1 0x5F PUSH32 0x103410B6D5BE7198885220195E51A50B95BD8925407564736F6C634300080D00 CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        275,
        6744
      ],
      "op": "PUSH20",
      "path": "3",
      "value": "0x0"
    },
    "21": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "22": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "EQ",
      "path": "3"
    },
    "23": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "25": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "27": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "28": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "30": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "31": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "LT",
      "path": "3"
    },
    "32": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x35"
    },
    "35": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "36": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "38": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "39": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "41": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "SHR",
      "path": "3"
    },
    "42": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "DUP1",
      "path": "3"
    },
    "43": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x35270015"
    },
    "48": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "EQ",
      "path": "3"
    },
    "49": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3A"
    },
    "52": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "53": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "54": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "56": {
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "DUP1",
      "path": "3"
    },
    "57": {
      "first_revert": true,
      "fn": null,
      "offset": [
        275,
        6744
      ],
      "op": "REVERT",
      "path": "3"
    },
    "58": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "59": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D"
    },
    "62": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x48"
    },
    "65": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "66": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "68": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4A1"
    },
    "71": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMP",
      "path": "3"
    },
    "72": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "73": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x63"
    },
    "76": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMP",
      "path": "3"
    },
    "77": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "78": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "80": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "81": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5A"
    },
    "84": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "85": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "86": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4EA"
    },
    "89": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMP",
      "path": "3"
    },
    "90": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "91": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "93": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "94": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "DUP1",
      "path": "3"
    },
    "95": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "96": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SUB",
      "path": "3"
    },
    "97": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "98": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "RETURN",
      "path": "3"
    },
    "99": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "100": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4300,
        4313
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "102": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4326,
        4354
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "104": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4357,
        4602
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF2"
    },
    "107": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "109": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "110": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "DUP1",
      "path": "3"
    },
    "111": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x760"
    },
    "114": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "ADD",
      "path": "3"
    },
    "115": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "117": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "118": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "DUP1",
      "path": "3"
    },
    "119": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x738"
    },
    "122": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "DUP2",
      "path": "3"
    },
    "123": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "124": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "126": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "ADD",
      "path": "3"
    },
    "127": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6DD"
    },
    "130": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x738"
    },
    "133": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "134": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4406,
        4420
      ],
      "op": "CODECOPY",
      "path": "3"
    },
    "135": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4439,
        4472
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8F"
    },
    "138": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4459,
        4471
      ],
      "op": "DUP6",
      "path": "3"
    },
    "139": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4439,
        4458
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11C"
    },
    "142": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4439,
        4472
      ],
      "op": "JUMP",
      "path": "3"
    },
    "143": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4439,
        4472
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "144": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "146": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "147": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "DUP1",
      "path": "3"
    },
    "148": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xA0"
    },
    "150": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "ADD",
      "path": "3"
    },
    "151": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "153": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "154": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "DUP1",
      "path": "3"
    },
    "155": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6B"
    },
    "157": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "DUP2",
      "path": "3"
    },
    "158": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "159": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "161": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "ADD",
      "path": "3"
    },
    "162": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xE55"
    },
    "165": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6B"
    },
    "167": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "168": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4493,
        4505
      ],
      "op": "CODECOPY",
      "path": "3"
    },
    "169": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4524,
        4554
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB1"
    },
    "172": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4541,
        4553
      ],
      "op": "DUP8",
      "path": "3"
    },
    "173": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4524,
        4540
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x245"
    },
    "176": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4524,
        4554
      ],
      "op": "JUMP",
      "path": "3"
    },
    "177": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4524,
        4554
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "178": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "180": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "181": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "DUP1",
      "path": "3"
    },
    "182": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "184": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "ADD",
      "path": "3"
    },
    "185": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "187": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "188": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "DUP1",
      "path": "3"
    },
    "189": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x28"
    },
    "191": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "DUP2",
      "path": "3"
    },
    "192": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "193": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "195": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "ADD",
      "path": "3"
    },
    "196": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6B5"
    },
    "199": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x28"
    },
    "201": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "202": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4573,
        4585
      ],
      "op": "CODECOPY",
      "path": "3"
    },
    "203": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "205": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "206": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "208": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "ADD",
      "path": "3"
    },
    "209": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDE"
    },
    "212": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP6",
      "path": "3"
    },
    "213": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "214": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "215": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "216": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "217": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "218": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x51D"
    },
    "221": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4371,
        4601
      ],
      "op": "JUMP",
      "path": "3"
    },
    "222": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "223": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "225": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "226": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "228": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "DUP2",
      "path": "3"
    },
    "229": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "DUP4",
      "path": "3"
    },
    "230": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SUB",
      "path": "3"
    },
    "231": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SUB",
      "path": "3"
    },
    "232": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "DUP2",
      "path": "3"
    },
    "233": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "234": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "235": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "237": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4371,
        4601
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "238": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4357,
        4370
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x34E"
    },
    "241": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4357,
        4602
      ],
      "op": "JUMP",
      "path": "3"
    },
    "242": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4357,
        4602
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "243": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4326,
        4602
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "244": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4326,
        4602
      ],
      "op": "POP",
      "path": "3"
    },
    "245": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4676,
        4690
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 0
    },
    "246": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "248": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "249": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "251": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "ADD",
      "path": "3"
    },
    "252": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x105"
    },
    "255": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "256": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "257": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x588"
    },
    "260": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "i",
      "offset": [
        4629,
        4691
      ],
      "op": "JUMP",
      "path": "3"
    },
    "261": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "262": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "264": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "265": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "267": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "DUP2",
      "path": "3"
    },
    "268": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "DUP4",
      "path": "3"
    },
    "269": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "SUB",
      "path": "3"
    },
    "270": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "SUB",
      "path": "3"
    },
    "271": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "DUP2",
      "path": "3"
    },
    "272": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "273": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "274": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "276": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4629,
        4691
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "277": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4615,
        4692
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "278": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4615,
        4692
      ],
      "op": "POP",
      "path": "3"
    },
    "279": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4615,
        4692
      ],
      "op": "POP",
      "path": "3"
    },
    "280": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "281": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "282": {
      "fn": "BadgeFactory.callthisForImage",
      "offset": [
        4231,
        4701
      ],
      "op": "POP",
      "path": "3"
    },
    "283": {
      "fn": "BadgeFactory.callthisForImage",
      "jump": "o",
      "offset": [
        4231,
        4701
      ],
      "op": "JUMP",
      "path": "3"
    },
    "284": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "285": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        2977,
        2990
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "287": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3021,
        3022
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "289": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3018
      ],
      "op": "DUP3",
      "path": "3"
    },
    "290": {
      "branch": 15,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3022
      ],
      "op": "GT",
      "path": "3"
    },
    "291": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "DUP1",
      "path": "3"
    },
    "292": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "293": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x137"
    },
    "296": {
      "branch": 15,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "297": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "POP",
      "path": "3"
    },
    "298": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3042,
        3055
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x1158E460913D00000"
    },
    "308": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3026,
        3038
      ],
      "op": "DUP3",
      "path": "3"
    },
    "309": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3026,
        3055
      ],
      "op": "GT",
      "path": "3"
    },
    "310": {
      "branch": 16,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3026,
        3055
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "311": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3006,
        3055
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "312": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3003,
        3441
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "313": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3003,
        3441
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x159"
    },
    "316": {
      "branch": 16,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3003,
        3441
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "317": {
      "op": "POP"
    },
    "318": {
      "op": "POP"
    },
    "319": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 1,
      "value": "0x40"
    },
    "321": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "DUP1",
      "path": "3"
    },
    "322": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "323": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "DUP1",
      "path": "3"
    },
    "324": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "DUP3",
      "path": "3"
    },
    "325": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "ADD",
      "path": "3"
    },
    "326": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "327": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "328": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "329": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "331": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "DUP2",
      "path": "3"
    },
    "332": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "333": {
      "op": "PUSH1",
      "value": "0x49"
    },
    "335": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "337": {
      "op": "SHL"
    },
    "338": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "340": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "DUP3",
      "path": "3"
    },
    "341": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "ADD",
      "path": "3"
    },
    "342": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "343": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3070,
        3080
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "344": {
      "fn": "BadgeFactory._getExperienceLevel",
      "jump": "o",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMP",
      "path": "3"
    },
    "345": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3003,
        3441
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "346": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3114,
        3127
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x1158E460913D00000"
    },
    "356": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3111
      ],
      "op": "DUP3",
      "path": "3"
    },
    "357": {
      "branch": 17,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3127
      ],
      "op": "GT",
      "path": "3"
    },
    "358": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "DUP1",
      "path": "3"
    },
    "359": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "360": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x17A"
    },
    "363": {
      "branch": 17,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "364": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "POP",
      "path": "3"
    },
    "365": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3147,
        3160
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x22B1C8C1227A00000"
    },
    "375": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3131,
        3143
      ],
      "op": "DUP3",
      "path": "3"
    },
    "376": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3131,
        3160
      ],
      "op": "GT",
      "path": "3"
    },
    "377": {
      "branch": 18,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3131,
        3160
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "378": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3099,
        3160
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "379": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3096,
        3441
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "380": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3096,
        3441
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19D"
    },
    "383": {
      "branch": 18,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3096,
        3441
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "384": {
      "op": "POP"
    },
    "385": {
      "op": "POP"
    },
    "386": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x40"
    },
    "388": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "DUP1",
      "path": "3"
    },
    "389": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "390": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "DUP1",
      "path": "3"
    },
    "391": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "DUP3",
      "path": "3"
    },
    "392": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "ADD",
      "path": "3"
    },
    "393": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "394": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "395": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "396": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "398": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "DUP2",
      "path": "3"
    },
    "399": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "400": {
      "op": "PUSH2",
      "value": "0x4949"
    },
    "403": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "405": {
      "op": "SHL"
    },
    "406": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "408": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "DUP3",
      "path": "3"
    },
    "409": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "ADD",
      "path": "3"
    },
    "410": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "411": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3175,
        3186
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "412": {
      "fn": "BadgeFactory._getExperienceLevel",
      "jump": "o",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMP",
      "path": "3"
    },
    "413": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3096,
        3441
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "414": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3220,
        3233
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x22B1C8C1227A00000"
    },
    "424": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3217
      ],
      "op": "DUP3",
      "path": "3"
    },
    "425": {
      "branch": 19,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3233
      ],
      "op": "GT",
      "path": "3"
    },
    "426": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "DUP1",
      "path": "3"
    },
    "427": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "428": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1BE"
    },
    "431": {
      "branch": 19,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "432": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "POP",
      "path": "3"
    },
    "433": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3253,
        3266
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x340AAD21B3B700000"
    },
    "443": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3237,
        3249
      ],
      "op": "DUP3",
      "path": "3"
    },
    "444": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3237,
        3266
      ],
      "op": "GT",
      "path": "3"
    },
    "445": {
      "branch": 20,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3237,
        3266
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "446": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3205,
        3266
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "447": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3202,
        3441
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "448": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3202,
        3441
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1E2"
    },
    "451": {
      "branch": 20,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3202,
        3441
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "452": {
      "op": "POP"
    },
    "453": {
      "op": "POP"
    },
    "454": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x40"
    },
    "456": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "DUP1",
      "path": "3"
    },
    "457": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "458": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "DUP1",
      "path": "3"
    },
    "459": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "DUP3",
      "path": "3"
    },
    "460": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "ADD",
      "path": "3"
    },
    "461": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "462": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "463": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "464": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "466": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "DUP2",
      "path": "3"
    },
    "467": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "468": {
      "op": "PUSH3",
      "value": "0x494949"
    },
    "472": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "474": {
      "op": "SHL"
    },
    "475": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "477": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "DUP3",
      "path": "3"
    },
    "478": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "ADD",
      "path": "3"
    },
    "479": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "480": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3281,
        3293
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "481": {
      "fn": "BadgeFactory._getExperienceLevel",
      "jump": "o",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMP",
      "path": "3"
    },
    "482": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3202,
        3441
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "483": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3327,
        3340
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x340AAD21B3B700000"
    },
    "493": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3324
      ],
      "op": "DUP3",
      "path": "3"
    },
    "494": {
      "branch": 21,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3340
      ],
      "op": "GT",
      "path": "3"
    },
    "495": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "DUP1",
      "path": "3"
    },
    "496": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "497": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x203"
    },
    "500": {
      "branch": 21,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "501": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "POP",
      "path": "3"
    },
    "502": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3360,
        3373
      ],
      "op": "PUSH9",
      "path": "3",
      "value": "0x4563918244F400000"
    },
    "512": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3344,
        3356
      ],
      "op": "DUP3",
      "path": "3"
    },
    "513": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3344,
        3373
      ],
      "op": "GT",
      "path": "3"
    },
    "514": {
      "branch": 22,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3344,
        3373
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "515": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3312,
        3373
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "516": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3309,
        3441
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "517": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3309,
        3441
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x226"
    },
    "520": {
      "branch": 22,
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3309,
        3441
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "521": {
      "op": "POP"
    },
    "522": {
      "op": "POP"
    },
    "523": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 4,
      "value": "0x40"
    },
    "525": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "DUP1",
      "path": "3"
    },
    "526": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "527": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "DUP1",
      "path": "3"
    },
    "528": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "DUP3",
      "path": "3"
    },
    "529": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "ADD",
      "path": "3"
    },
    "530": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "531": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "532": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "533": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "535": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "DUP2",
      "path": "3"
    },
    "536": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "537": {
      "op": "PUSH2",
      "value": "0x24AB"
    },
    "540": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "542": {
      "op": "SHL"
    },
    "543": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "545": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "DUP3",
      "path": "3"
    },
    "546": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "ADD",
      "path": "3"
    },
    "547": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "548": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3388,
        3399
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "549": {
      "fn": "BadgeFactory._getExperienceLevel",
      "jump": "o",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMP",
      "path": "3"
    },
    "550": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3309,
        3441
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "551": {
      "op": "POP"
    },
    "552": {
      "op": "POP"
    },
    "553": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 5,
      "value": "0x40"
    },
    "555": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "DUP1",
      "path": "3"
    },
    "556": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "557": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "DUP1",
      "path": "3"
    },
    "558": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "DUP3",
      "path": "3"
    },
    "559": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "ADD",
      "path": "3"
    },
    "560": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "561": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "562": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "563": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "565": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "DUP2",
      "path": "3"
    },
    "566": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "567": {
      "op": "PUSH3",
      "value": "0x2D472D"
    },
    "571": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "573": {
      "op": "SHL"
    },
    "574": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "576": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "DUP3",
      "path": "3"
    },
    "577": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "ADD",
      "path": "3"
    },
    "578": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "579": {
      "fn": "BadgeFactory._getExperienceLevel",
      "offset": [
        3429,
        3441
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "580": {
      "fn": "BadgeFactory._getExperienceLevel",
      "jump": "o",
      "offset": [
        2903,
        3449
      ],
      "op": "JUMP",
      "path": "3"
    },
    "581": {
      "fn": "Strings.toString",
      "offset": [
        393,
        1116
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "582": {
      "fn": "Strings.toString",
      "offset": [
        449,
        462
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x60"
    },
    "584": {
      "fn": "Strings.toString",
      "offset": [
        670,
        675
      ],
      "op": "DUP2",
      "path": "8"
    },
    "585": {
      "fn": "Strings.toString",
      "offset": [
        679,
        680
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "587": {
      "branch": 24,
      "fn": "Strings.toString",
      "offset": [
        670,
        680
      ],
      "op": "SUB",
      "path": "8"
    },
    "588": {
      "fn": "Strings.toString",
      "offset": [
        666,
        719
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x26C"
    },
    "591": {
      "branch": 24,
      "fn": "Strings.toString",
      "offset": [
        666,
        719
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "592": {
      "op": "POP"
    },
    "593": {
      "op": "POP"
    },
    "594": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 6,
      "value": "0x40"
    },
    "596": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "DUP1",
      "path": "8"
    },
    "597": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "598": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "DUP1",
      "path": "8"
    },
    "599": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "DUP3",
      "path": "8"
    },
    "600": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "ADD",
      "path": "8"
    },
    "601": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "602": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "603": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "604": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "606": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "DUP2",
      "path": "8"
    },
    "607": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "608": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "610": {
      "op": "PUSH1",
      "value": "0xFC"
    },
    "612": {
      "op": "SHL"
    },
    "613": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "615": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "DUP3",
      "path": "8"
    },
    "616": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "ADD",
      "path": "8"
    },
    "617": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "618": {
      "fn": "Strings.toString",
      "offset": [
        697,
        707
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "619": {
      "fn": "Strings.toString",
      "jump": "o",
      "offset": [
        393,
        1116
      ],
      "op": "JUMP",
      "path": "8"
    },
    "620": {
      "fn": "Strings.toString",
      "offset": [
        666,
        719
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "621": {
      "fn": "Strings.toString",
      "offset": [
        744,
        749
      ],
      "op": "DUP2",
      "path": "8"
    },
    "622": {
      "fn": "Strings.toString",
      "offset": [
        729,
        741
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "624": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "625": {
      "fn": "Strings.toString",
      "offset": [
        792,
        801
      ],
      "op": "DUP2",
      "path": "8"
    },
    "626": {
      "fn": "Strings.toString",
      "offset": [
        792,
        801
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "627": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x296"
    },
    "630": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "631": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "DUP1",
      "path": "8",
      "statement": 7
    },
    "632": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x280"
    },
    "635": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "DUP2",
      "path": "8"
    },
    "636": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x5E3"
    },
    "639": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        818,
        826
      ],
      "op": "JUMP",
      "path": "8"
    },
    "640": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "641": {
      "fn": "Strings.toString",
      "offset": [
        818,
        826
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "642": {
      "op": "POP"
    },
    "643": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 8,
      "value": "0x28F"
    },
    "646": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "647": {
      "op": "POP"
    },
    "648": {
      "fn": "Strings.toString",
      "offset": [
        849,
        851
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA"
    },
    "650": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "DUP4",
      "path": "8"
    },
    "651": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x612"
    },
    "654": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        841,
        851
      ],
      "op": "JUMP",
      "path": "8"
    },
    "655": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "656": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "657": {
      "fn": "Strings.toString",
      "offset": [
        841,
        851
      ],
      "op": "POP",
      "path": "8"
    },
    "658": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x270"
    },
    "661": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "JUMP",
      "path": "8"
    },
    "662": {
      "fn": "Strings.toString",
      "offset": [
        785,
        863
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "663": {
      "fn": "Strings.toString",
      "offset": [
        873,
        892
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "665": {
      "fn": "Strings.toString",
      "offset": [
        905,
        911
      ],
      "op": "DUP2",
      "path": "8"
    },
    "666": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH8",
      "path": "8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "675": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP2",
      "path": "8"
    },
    "676": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "GT",
      "path": "8"
    },
    "677": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "678": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2B1"
    },
    "681": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "682": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2B1"
    },
    "685": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x626"
    },
    "688": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        895,
        912
      ],
      "op": "JUMP",
      "path": "8"
    },
    "689": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "690": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "692": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "693": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "694": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP1",
      "path": "8"
    },
    "695": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP3",
      "path": "8"
    },
    "696": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "697": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP1",
      "path": "8"
    },
    "698": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "700": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ADD",
      "path": "8"
    },
    "701": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1F"
    },
    "703": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "NOT",
      "path": "8"
    },
    "704": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "AND",
      "path": "8"
    },
    "705": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "707": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ADD",
      "path": "8"
    },
    "708": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP3",
      "path": "8"
    },
    "709": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ADD",
      "path": "8"
    },
    "710": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "712": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "713": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP1",
      "path": "8"
    },
    "714": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "715": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2DB"
    },
    "718": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "719": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "721": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP3",
      "path": "8"
    },
    "722": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ADD",
      "path": "8"
    },
    "723": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP2",
      "path": "8"
    },
    "724": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP1",
      "path": "8"
    },
    "725": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "726": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "DUP4",
      "path": "8"
    },
    "727": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "CALLDATACOPY",
      "path": "8"
    },
    "728": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "ADD",
      "path": "8"
    },
    "729": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "730": {
      "op": "POP"
    },
    "731": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "732": {
      "fn": "Strings.toString",
      "offset": [
        895,
        912
      ],
      "op": "POP",
      "path": "8"
    },
    "733": {
      "fn": "Strings.toString",
      "offset": [
        873,
        912
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "734": {
      "fn": "Strings.toString",
      "offset": [
        873,
        912
      ],
      "op": "POP",
      "path": "8"
    },
    "735": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "736": {
      "fn": "Strings.toString",
      "offset": [
        930,
        940
      ],
      "op": "DUP5",
      "path": "8"
    },
    "737": {
      "fn": "Strings.toString",
      "offset": [
        930,
        940
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "738": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x346"
    },
    "741": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "742": {
      "fn": "Strings.toString",
      "offset": [
        957,
        968
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 9,
      "value": "0x2F0"
    },
    "745": {
      "fn": "Strings.toString",
      "offset": [
        967,
        968
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "747": {
      "fn": "Strings.toString",
      "offset": [
        957,
        968
      ],
      "op": "DUP4",
      "path": "8"
    },
    "748": {
      "fn": "Strings.toString",
      "offset": [
        957,
        968
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x63C"
    },
    "751": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        957,
        968
      ],
      "op": "JUMP",
      "path": "8"
    },
    "752": {
      "fn": "Strings.toString",
      "offset": [
        957,
        968
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "753": {
      "fn": "Strings.toString",
      "offset": [
        957,
        968
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "754": {
      "op": "POP"
    },
    "755": {
      "fn": "Strings.toString",
      "offset": [
        1026,
        1036
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 10,
      "value": "0x2FD"
    },
    "758": {
      "fn": "Strings.toString",
      "offset": [
        1034,
        1036
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA"
    },
    "760": {
      "fn": "Strings.toString",
      "offset": [
        1026,
        1031
      ],
      "op": "DUP7",
      "path": "8"
    },
    "761": {
      "fn": "Strings.toString",
      "offset": [
        1026,
        1036
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x653"
    },
    "764": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        1026,
        1036
      ],
      "op": "JUMP",
      "path": "8"
    },
    "765": {
      "fn": "Strings.toString",
      "offset": [
        1026,
        1036
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "766": {
      "fn": "Strings.toString",
      "offset": [
        1013,
        1037
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x308"
    },
    "769": {
      "fn": "Strings.toString",
      "offset": [
        1013,
        1037
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "770": {
      "fn": "Strings.toString",
      "offset": [
        1013,
        1015
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x30"
    },
    "772": {
      "fn": "Strings.toString",
      "offset": [
        1013,
        1037
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x667"
    },
    "775": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        1013,
        1037
      ],
      "op": "JUMP",
      "path": "8"
    },
    "776": {
      "fn": "Strings.toString",
      "offset": [
        1013,
        1037
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "777": {
      "fn": "Strings.toString",
      "offset": [
        1000,
        1039
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xF8"
    },
    "779": {
      "fn": "Strings.toString",
      "offset": [
        1000,
        1039
      ],
      "op": "SHL",
      "path": "8"
    },
    "780": {
      "fn": "Strings.toString",
      "offset": [
        983,
        989
      ],
      "op": "DUP2",
      "path": "8"
    },
    "781": {
      "fn": "Strings.toString",
      "offset": [
        990,
        996
      ],
      "op": "DUP4",
      "path": "8"
    },
    "782": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "DUP2",
      "path": "8"
    },
    "783": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "784": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "DUP2",
      "path": "8"
    },
    "785": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "LT",
      "path": "8"
    },
    "786": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x31D"
    },
    "789": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "790": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x31D"
    },
    "793": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x67F"
    },
    "796": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        983,
        997
      ],
      "op": "JUMP",
      "path": "8"
    },
    "797": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "798": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "800": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "ADD",
      "path": "8"
    },
    "801": {
      "fn": "Strings.toString",
      "offset": [
        983,
        997
      ],
      "op": "ADD",
      "path": "8"
    },
    "802": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "803": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "805": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "807": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "809": {
      "op": "SHL"
    },
    "810": {
      "op": "SUB"
    },
    "811": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "NOT",
      "path": "8"
    },
    "812": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "AND",
      "path": "8"
    },
    "813": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "814": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "DUP2",
      "path": "8"
    },
    "815": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "817": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "BYTE",
      "path": "8"
    },
    "818": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "819": {
      "fn": "Strings.toString",
      "offset": [
        983,
        1039
      ],
      "op": "MSTORE8",
      "path": "8"
    },
    "820": {
      "op": "POP"
    },
    "821": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 11,
      "value": "0x33F"
    },
    "824": {
      "fn": "Strings.toString",
      "offset": [
        1063,
        1065
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA"
    },
    "826": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "DUP7",
      "path": "8"
    },
    "827": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x612"
    },
    "830": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        1054,
        1065
      ],
      "op": "JUMP",
      "path": "8"
    },
    "831": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "832": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "SWAP5",
      "path": "8"
    },
    "833": {
      "fn": "Strings.toString",
      "offset": [
        1054,
        1065
      ],
      "op": "POP",
      "path": "8"
    },
    "834": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x2DF"
    },
    "837": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "JUMP",
      "path": "8"
    },
    "838": {
      "fn": "Strings.toString",
      "offset": [
        923,
        1077
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "839": {
      "fn": "Strings.toString",
      "offset": [
        1101,
        1107
      ],
      "op": "SWAP5",
      "path": "8",
      "statement": 12
    },
    "840": {
      "fn": "Strings.toString",
      "offset": [
        393,
        1116
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "841": {
      "op": "POP"
    },
    "842": {
      "op": "POP"
    },
    "843": {
      "op": "POP"
    },
    "844": {
      "op": "POP"
    },
    "845": {
      "fn": "Strings.toString",
      "jump": "o",
      "offset": [
        393,
        1116
      ],
      "op": "JUMP",
      "path": "8"
    },
    "846": {
      "fn": "Base64.encode",
      "offset": [
        525,
        3578
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "847": {
      "fn": "Base64.encode",
      "offset": [
        583,
        596
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "849": {
      "fn": "Base64.encode",
      "offset": [
        820,
        824
      ],
      "op": "DUP2",
      "path": "5"
    },
    "850": {
      "fn": "Base64.encode",
      "offset": [
        820,
        831
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "851": {
      "fn": "Base64.encode",
      "offset": [
        835,
        836
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "853": {
      "branch": 23,
      "fn": "Base64.encode",
      "offset": [
        820,
        836
      ],
      "op": "SUB",
      "path": "5"
    },
    "854": {
      "fn": "Base64.encode",
      "offset": [
        816,
        847
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x36D"
    },
    "857": {
      "branch": 23,
      "fn": "Base64.encode",
      "offset": [
        816,
        847
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "858": {
      "op": "POP"
    },
    "859": {
      "op": "POP"
    },
    "860": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 13,
      "value": "0x40"
    },
    "862": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "DUP1",
      "path": "5"
    },
    "863": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "864": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "866": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "DUP2",
      "path": "5"
    },
    "867": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "ADD",
      "path": "5"
    },
    "868": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "869": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "870": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "873": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "DUP2",
      "path": "5"
    },
    "874": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "875": {
      "fn": "Base64.encode",
      "offset": [
        838,
        847
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "876": {
      "fn": "Base64.encode",
      "jump": "o",
      "offset": [
        525,
        3578
      ],
      "op": "JUMP",
      "path": "5"
    },
    "877": {
      "fn": "Base64.encode",
      "offset": [
        816,
        847
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "878": {
      "fn": "Base64.encode",
      "offset": [
        900,
        919
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "880": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "882": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "883": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "DUP1",
      "path": "5"
    },
    "884": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "886": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "ADD",
      "path": "5"
    },
    "887": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "889": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "890": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "DUP1",
      "path": "5"
    },
    "891": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "893": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "DUP2",
      "path": "5"
    },
    "894": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "895": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "897": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "ADD",
      "path": "5"
    },
    "898": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE15"
    },
    "901": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "903": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "904": {
      "fn": "Base64.encode",
      "offset": [
        922,
        928
      ],
      "op": "CODECOPY",
      "path": "5"
    },
    "905": {
      "fn": "Base64.encode",
      "offset": [
        900,
        928
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "906": {
      "fn": "Base64.encode",
      "offset": [
        900,
        928
      ],
      "op": "POP",
      "path": "5"
    },
    "907": {
      "fn": "Base64.encode",
      "offset": [
        1339,
        1359
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "909": {
      "fn": "Base64.encode",
      "offset": [
        1398,
        1399
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "911": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1383
      ],
      "op": "DUP5",
      "path": "5"
    },
    "912": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1390
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "913": {
      "fn": "Base64.encode",
      "offset": [
        1393,
        1394
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "915": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1394
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x39C"
    },
    "918": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1394
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "919": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1394
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "920": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1394
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x667"
    },
    "923": {
      "fn": "Base64.encode",
      "jump": "i",
      "offset": [
        1379,
        1394
      ],
      "op": "JUMP",
      "path": "5"
    },
    "924": {
      "fn": "Base64.encode",
      "offset": [
        1379,
        1394
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "925": {
      "fn": "Base64.encode",
      "offset": [
        1378,
        1399
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3A6"
    },
    "928": {
      "fn": "Base64.encode",
      "offset": [
        1378,
        1399
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "929": {
      "fn": "Base64.encode",
      "offset": [
        1378,
        1399
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "930": {
      "fn": "Base64.encode",
      "offset": [
        1378,
        1399
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x612"
    },
    "933": {
      "fn": "Base64.encode",
      "jump": "i",
      "offset": [
        1378,
        1399
      ],
      "op": "JUMP",
      "path": "5"
    },
    "934": {
      "fn": "Base64.encode",
      "offset": [
        1378,
        1399
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "935": {
      "fn": "Base64.encode",
      "offset": [
        1373,
        1400
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3B1"
    },
    "938": {
      "fn": "Base64.encode",
      "offset": [
        1373,
        1400
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "939": {
      "fn": "Base64.encode",
      "offset": [
        1373,
        1374
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "941": {
      "fn": "Base64.encode",
      "offset": [
        1373,
        1400
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x695"
    },
    "944": {
      "fn": "Base64.encode",
      "jump": "i",
      "offset": [
        1373,
        1400
      ],
      "op": "JUMP",
      "path": "5"
    },
    "945": {
      "fn": "Base64.encode",
      "offset": [
        1373,
        1400
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "946": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH8",
      "path": "5",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "955": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP2",
      "path": "5"
    },
    "956": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "GT",
      "path": "5"
    },
    "957": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "958": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3C9"
    },
    "961": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "962": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3C9"
    },
    "965": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x626"
    },
    "968": {
      "fn": "Base64.encode",
      "jump": "i",
      "offset": [
        1362,
        1401
      ],
      "op": "JUMP",
      "path": "5"
    },
    "969": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "970": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "972": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "973": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "974": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP1",
      "path": "5"
    },
    "975": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP3",
      "path": "5"
    },
    "976": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "977": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP1",
      "path": "5"
    },
    "978": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "980": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ADD",
      "path": "5"
    },
    "981": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "983": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "NOT",
      "path": "5"
    },
    "984": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "AND",
      "path": "5"
    },
    "985": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "987": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ADD",
      "path": "5"
    },
    "988": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP3",
      "path": "5"
    },
    "989": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ADD",
      "path": "5"
    },
    "990": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "992": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "993": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP1",
      "path": "5"
    },
    "994": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "995": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3F3"
    },
    "998": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "999": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1001": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1002": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ADD",
      "path": "5"
    },
    "1003": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1004": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1005": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "1006": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1007": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "CALLDATACOPY",
      "path": "5"
    },
    "1008": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "ADD",
      "path": "5"
    },
    "1009": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1010": {
      "op": "POP"
    },
    "1011": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1012": {
      "fn": "Base64.encode",
      "offset": [
        1362,
        1401
      ],
      "op": "POP",
      "path": "5"
    },
    "1013": {
      "fn": "Base64.encode",
      "offset": [
        1339,
        1401
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1014": {
      "fn": "Base64.encode",
      "offset": [
        1339,
        1401
      ],
      "op": "POP",
      "path": "5"
    },
    "1015": {
      "fn": "Base64.encode",
      "offset": [
        1537,
        1538
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1017": {
      "fn": "Base64.encode",
      "offset": [
        1530,
        1535
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1018": {
      "fn": "Base64.encode",
      "offset": [
        1526,
        1539
      ],
      "op": "ADD",
      "path": "5"
    },
    "1019": {
      "fn": "Base64.encode",
      "offset": [
        1641,
        1643
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1021": {
      "fn": "Base64.encode",
      "offset": [
        1633,
        1639
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1022": {
      "fn": "Base64.encode",
      "offset": [
        1629,
        1644
      ],
      "op": "ADD",
      "path": "5"
    },
    "1023": {
      "fn": "Base64.encode",
      "offset": [
        1752,
        1756
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1024": {
      "fn": "Base64.encode",
      "offset": [
        1804,
        1808
      ],
      "op": "DUP7",
      "path": "5"
    },
    "1025": {
      "fn": "Base64.encode",
      "offset": [
        1798,
        1809
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1026": {
      "fn": "Base64.encode",
      "offset": [
        1792,
        1796
      ],
      "op": "DUP8",
      "path": "5"
    },
    "1027": {
      "fn": "Base64.encode",
      "offset": [
        1788,
        1810
      ],
      "op": "ADD",
      "path": "5"
    },
    "1028": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1029": {
      "fn": "Base64.encode",
      "offset": [
        1838,
        1844
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1030": {
      "fn": "Base64.encode",
      "offset": [
        1829,
        1836
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1031": {
      "fn": "Base64.encode",
      "offset": [
        1826,
        1845
      ],
      "op": "LT",
      "path": "5"
    },
    "1032": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1033": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x45F"
    },
    "1036": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1037": {
      "fn": "Base64.encode",
      "offset": [
        1944,
        1945
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "1039": {
      "fn": "Base64.encode",
      "offset": [
        1935,
        1942
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1040": {
      "fn": "Base64.encode",
      "offset": [
        1931,
        1946
      ],
      "op": "ADD",
      "path": "5"
    },
    "1041": {
      "fn": "Base64.encode",
      "offset": [
        1920,
        1946
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1042": {
      "fn": "Base64.encode",
      "offset": [
        1920,
        1946
      ],
      "op": "POP",
      "path": "5"
    },
    "1043": {
      "fn": "Base64.encode",
      "offset": [
        1983,
        1990
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1044": {
      "fn": "Base64.encode",
      "offset": [
        1977,
        1991
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1045": {
      "fn": "Base64.encode",
      "offset": [
        2636,
        2640
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3F"
    },
    "1047": {
      "fn": "Base64.encode",
      "offset": [
        2628,
        2633
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1048": {
      "fn": "Base64.encode",
      "offset": [
        2624,
        2626
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x12"
    },
    "1050": {
      "fn": "Base64.encode",
      "offset": [
        2620,
        2634
      ],
      "op": "SHR",
      "path": "5"
    },
    "1051": {
      "fn": "Base64.encode",
      "offset": [
        2616,
        2641
      ],
      "op": "AND",
      "path": "5"
    },
    "1052": {
      "fn": "Base64.encode",
      "offset": [
        2606,
        2614
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1053": {
      "fn": "Base64.encode",
      "offset": [
        2602,
        2642
      ],
      "op": "ADD",
      "path": "5"
    },
    "1054": {
      "fn": "Base64.encode",
      "offset": [
        2596,
        2643
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1055": {
      "fn": "Base64.encode",
      "offset": [
        2585,
        2594
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1056": {
      "fn": "Base64.encode",
      "offset": [
        2577,
        2644
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1057": {
      "fn": "Base64.encode",
      "offset": [
        2690,
        2691
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1059": {
      "fn": "Base64.encode",
      "offset": [
        2679,
        2688
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1060": {
      "fn": "Base64.encode",
      "offset": [
        2675,
        2692
      ],
      "op": "ADD",
      "path": "5"
    },
    "1061": {
      "fn": "Base64.encode",
      "offset": [
        2662,
        2692
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "1062": {
      "fn": "Base64.encode",
      "offset": [
        2662,
        2692
      ],
      "op": "POP",
      "path": "5"
    },
    "1063": {
      "fn": "Base64.encode",
      "offset": [
        2782,
        2786
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3F"
    },
    "1065": {
      "fn": "Base64.encode",
      "offset": [
        2774,
        2779
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1066": {
      "fn": "Base64.encode",
      "offset": [
        2770,
        2772
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xC"
    },
    "1068": {
      "fn": "Base64.encode",
      "offset": [
        2766,
        2780
      ],
      "op": "SHR",
      "path": "5"
    },
    "1069": {
      "fn": "Base64.encode",
      "offset": [
        2762,
        2787
      ],
      "op": "AND",
      "path": "5"
    },
    "1070": {
      "fn": "Base64.encode",
      "offset": [
        2752,
        2760
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1071": {
      "fn": "Base64.encode",
      "offset": [
        2748,
        2788
      ],
      "op": "ADD",
      "path": "5"
    },
    "1072": {
      "fn": "Base64.encode",
      "offset": [
        2742,
        2789
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1073": {
      "fn": "Base64.encode",
      "offset": [
        2731,
        2740
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1074": {
      "fn": "Base64.encode",
      "offset": [
        2723,
        2790
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1075": {
      "fn": "Base64.encode",
      "offset": [
        2836,
        2837
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1077": {
      "fn": "Base64.encode",
      "offset": [
        2825,
        2834
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1078": {
      "fn": "Base64.encode",
      "offset": [
        2821,
        2838
      ],
      "op": "ADD",
      "path": "5"
    },
    "1079": {
      "fn": "Base64.encode",
      "offset": [
        2808,
        2838
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "1080": {
      "fn": "Base64.encode",
      "offset": [
        2808,
        2838
      ],
      "op": "POP",
      "path": "5"
    },
    "1081": {
      "fn": "Base64.encode",
      "offset": [
        2927,
        2931
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3F"
    },
    "1083": {
      "fn": "Base64.encode",
      "offset": [
        2919,
        2924
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1084": {
      "fn": "Base64.encode",
      "offset": [
        2916,
        2917
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "1086": {
      "fn": "Base64.encode",
      "offset": [
        2912,
        2925
      ],
      "op": "SHR",
      "path": "5"
    },
    "1087": {
      "fn": "Base64.encode",
      "offset": [
        2908,
        2932
      ],
      "op": "AND",
      "path": "5"
    },
    "1088": {
      "fn": "Base64.encode",
      "offset": [
        2898,
        2906
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1089": {
      "fn": "Base64.encode",
      "offset": [
        2894,
        2933
      ],
      "op": "ADD",
      "path": "5"
    },
    "1090": {
      "fn": "Base64.encode",
      "offset": [
        2888,
        2934
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1091": {
      "fn": "Base64.encode",
      "offset": [
        2877,
        2886
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1092": {
      "fn": "Base64.encode",
      "offset": [
        2869,
        2935
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1093": {
      "fn": "Base64.encode",
      "offset": [
        2981,
        2982
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1095": {
      "fn": "Base64.encode",
      "offset": [
        2970,
        2979
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1096": {
      "fn": "Base64.encode",
      "offset": [
        2966,
        2983
      ],
      "op": "ADD",
      "path": "5"
    },
    "1097": {
      "fn": "Base64.encode",
      "offset": [
        2953,
        2983
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "1098": {
      "fn": "Base64.encode",
      "offset": [
        2953,
        2983
      ],
      "op": "POP",
      "path": "5"
    },
    "1099": {
      "fn": "Base64.encode",
      "offset": [
        3064,
        3068
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3F"
    },
    "1101": {
      "fn": "Base64.encode",
      "offset": [
        3057,
        3062
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1102": {
      "fn": "Base64.encode",
      "offset": [
        3053,
        3069
      ],
      "op": "AND",
      "path": "5"
    },
    "1103": {
      "fn": "Base64.encode",
      "offset": [
        3043,
        3051
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1104": {
      "fn": "Base64.encode",
      "offset": [
        3039,
        3070
      ],
      "op": "ADD",
      "path": "5"
    },
    "1105": {
      "fn": "Base64.encode",
      "offset": [
        3033,
        3071
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1106": {
      "fn": "Base64.encode",
      "offset": [
        3022,
        3031
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1107": {
      "fn": "Base64.encode",
      "offset": [
        3014,
        3072
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1108": {
      "fn": "Base64.encode",
      "offset": [
        3014,
        3072
      ],
      "op": "POP",
      "path": "5"
    },
    "1109": {
      "fn": "Base64.encode",
      "offset": [
        3118,
        3119
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1111": {
      "fn": "Base64.encode",
      "offset": [
        3107,
        3116
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1112": {
      "fn": "Base64.encode",
      "offset": [
        3103,
        3120
      ],
      "op": "ADD",
      "path": "5"
    },
    "1113": {
      "fn": "Base64.encode",
      "offset": [
        3090,
        3120
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1114": {
      "fn": "Base64.encode",
      "offset": [
        3090,
        3120
      ],
      "op": "POP",
      "path": "5"
    },
    "1115": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x404"
    },
    "1118": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1119": {
      "fn": "Base64.encode",
      "offset": [
        1714,
        3146
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1120": {
      "fn": "Base64.encode",
      "offset": [
        1718,
        1825
      ],
      "op": "POP",
      "path": "5"
    },
    "1121": {
      "fn": "Base64.encode",
      "offset": [
        1718,
        1825
      ],
      "op": "POP",
      "path": "5"
    },
    "1122": {
      "fn": "Base64.encode",
      "offset": [
        3308,
        3309
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "1124": {
      "fn": "Base64.encode",
      "offset": [
        3301,
        3305
      ],
      "op": "DUP7",
      "path": "5"
    },
    "1125": {
      "fn": "Base64.encode",
      "offset": [
        3295,
        3306
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1126": {
      "fn": "Base64.encode",
      "offset": [
        3291,
        3310
      ],
      "op": "MOD",
      "path": "5"
    },
    "1127": {
      "fn": "Base64.encode",
      "offset": [
        3329,
        3330
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1129": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1130": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "EQ",
      "path": "5"
    },
    "1131": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x47B"
    },
    "1134": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1135": {
      "fn": "Base64.encode",
      "offset": [
        3466,
        3467
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1137": {
      "fn": "Base64.encode",
      "offset": [
        3461,
        3534
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1138": {
      "fn": "Base64.encode",
      "offset": [
        3461,
        3534
      ],
      "op": "EQ",
      "path": "5"
    },
    "1139": {
      "fn": "Base64.encode",
      "offset": [
        3461,
        3534
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x48E"
    },
    "1142": {
      "fn": "Base64.encode",
      "offset": [
        3461,
        3534
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1143": {
      "fn": "Base64.encode",
      "offset": [
        3284,
        3534
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x496"
    },
    "1146": {
      "fn": "Base64.encode",
      "offset": [
        3284,
        3534
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1147": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1148": {
      "fn": "Base64.encode",
      "offset": [
        3377,
        3381
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3D"
    },
    "1150": {
      "fn": "Base64.encode",
      "offset": [
        3373,
        3374
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1152": {
      "fn": "Base64.encode",
      "offset": [
        3362,
        3371
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1153": {
      "fn": "Base64.encode",
      "offset": [
        3358,
        3375
      ],
      "op": "SUB",
      "path": "5"
    },
    "1154": {
      "fn": "Base64.encode",
      "offset": [
        3350,
        3382
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1155": {
      "fn": "Base64.encode",
      "offset": [
        3427,
        3431
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3D"
    },
    "1157": {
      "fn": "Base64.encode",
      "offset": [
        3423,
        3424
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1159": {
      "fn": "Base64.encode",
      "offset": [
        3412,
        3421
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1160": {
      "fn": "Base64.encode",
      "offset": [
        3408,
        3425
      ],
      "op": "SUB",
      "path": "5"
    },
    "1161": {
      "fn": "Base64.encode",
      "offset": [
        3400,
        3432
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1162": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x496"
    },
    "1165": {
      "fn": "Base64.encode",
      "offset": [
        3324,
        3447
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1166": {
      "fn": "Base64.encode",
      "offset": [
        3461,
        3534
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1167": {
      "fn": "Base64.encode",
      "offset": [
        3514,
        3518
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3D"
    },
    "1169": {
      "fn": "Base64.encode",
      "offset": [
        3510,
        3511
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1171": {
      "fn": "Base64.encode",
      "offset": [
        3499,
        3508
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1172": {
      "fn": "Base64.encode",
      "offset": [
        3495,
        3512
      ],
      "op": "SUB",
      "path": "5"
    },
    "1173": {
      "fn": "Base64.encode",
      "offset": [
        3487,
        3519
      ],
      "op": "MSTORE8",
      "path": "5"
    },
    "1174": {
      "fn": "Base64.encode",
      "offset": [
        3284,
        3534
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1175": {
      "op": "POP"
    },
    "1176": {
      "fn": "Base64.encode",
      "offset": [
        3564,
        3570
      ],
      "op": "SWAP2",
      "path": "5",
      "statement": 14
    },
    "1177": {
      "fn": "Base64.encode",
      "offset": [
        3564,
        3570
      ],
      "op": "SWAP6",
      "path": "5"
    },
    "1178": {
      "fn": "Base64.encode",
      "offset": [
        525,
        3578
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1179": {
      "op": "POP"
    },
    "1180": {
      "op": "POP"
    },
    "1181": {
      "op": "POP"
    },
    "1182": {
      "op": "POP"
    },
    "1183": {
      "op": "POP"
    },
    "1184": {
      "fn": "Base64.encode",
      "jump": "o",
      "offset": [
        525,
        3578
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1185": {
      "op": "JUMPDEST"
    },
    "1186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1188": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1190": {
      "op": "DUP3"
    },
    "1191": {
      "op": "DUP5"
    },
    "1192": {
      "op": "SUB"
    },
    "1193": {
      "op": "SLT"
    },
    "1194": {
      "op": "ISZERO"
    },
    "1195": {
      "op": "PUSH2",
      "value": "0x4B3"
    },
    "1198": {
      "op": "JUMPI"
    },
    "1199": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1201": {
      "op": "DUP1"
    },
    "1202": {
      "op": "REVERT"
    },
    "1203": {
      "op": "JUMPDEST"
    },
    "1204": {
      "op": "POP"
    },
    "1205": {
      "op": "CALLDATALOAD"
    },
    "1206": {
      "op": "SWAP2"
    },
    "1207": {
      "op": "SWAP1"
    },
    "1208": {
      "op": "POP"
    },
    "1209": {
      "jump": "o",
      "op": "JUMP"
    },
    "1210": {
      "op": "JUMPDEST"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1213": {
      "op": "JUMPDEST"
    },
    "1214": {
      "op": "DUP4"
    },
    "1215": {
      "op": "DUP2"
    },
    "1216": {
      "op": "LT"
    },
    "1217": {
      "op": "ISZERO"
    },
    "1218": {
      "op": "PUSH2",
      "value": "0x4D5"
    },
    "1221": {
      "op": "JUMPI"
    },
    "1222": {
      "op": "DUP2"
    },
    "1223": {
      "op": "DUP2"
    },
    "1224": {
      "op": "ADD"
    },
    "1225": {
      "op": "MLOAD"
    },
    "1226": {
      "op": "DUP4"
    },
    "1227": {
      "op": "DUP3"
    },
    "1228": {
      "op": "ADD"
    },
    "1229": {
      "op": "MSTORE"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1232": {
      "op": "ADD"
    },
    "1233": {
      "op": "PUSH2",
      "value": "0x4BD"
    },
    "1236": {
      "op": "JUMP"
    },
    "1237": {
      "op": "JUMPDEST"
    },
    "1238": {
      "op": "DUP4"
    },
    "1239": {
      "op": "DUP2"
    },
    "1240": {
      "op": "GT"
    },
    "1241": {
      "op": "ISZERO"
    },
    "1242": {
      "op": "PUSH2",
      "value": "0x4E4"
    },
    "1245": {
      "op": "JUMPI"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1248": {
      "op": "DUP5"
    },
    "1249": {
      "op": "DUP5"
    },
    "1250": {
      "op": "ADD"
    },
    "1251": {
      "op": "MSTORE"
    },
    "1252": {
      "op": "JUMPDEST"
    },
    "1253": {
      "op": "POP"
    },
    "1254": {
      "op": "POP"
    },
    "1255": {
      "op": "POP"
    },
    "1256": {
      "op": "POP"
    },
    "1257": {
      "jump": "o",
      "op": "JUMP"
    },
    "1258": {
      "op": "JUMPDEST"
    },
    "1259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1261": {
      "op": "DUP2"
    },
    "1262": {
      "op": "MSTORE"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1265": {
      "op": "DUP3"
    },
    "1266": {
      "op": "MLOAD"
    },
    "1267": {
      "op": "DUP1"
    },
    "1268": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1270": {
      "op": "DUP5"
    },
    "1271": {
      "op": "ADD"
    },
    "1272": {
      "op": "MSTORE"
    },
    "1273": {
      "op": "PUSH2",
      "value": "0x509"
    },
    "1276": {
      "op": "DUP2"
    },
    "1277": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1279": {
      "op": "DUP6"
    },
    "1280": {
      "op": "ADD"
    },
    "1281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1283": {
      "op": "DUP8"
    },
    "1284": {
      "op": "ADD"
    },
    "1285": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1288": {
      "jump": "i",
      "op": "JUMP"
    },
    "1289": {
      "op": "JUMPDEST"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1292": {
      "op": "ADD"
    },
    "1293": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1295": {
      "op": "NOT"
    },
    "1296": {
      "op": "AND"
    },
    "1297": {
      "op": "SWAP2"
    },
    "1298": {
      "op": "SWAP1"
    },
    "1299": {
      "op": "SWAP2"
    },
    "1300": {
      "op": "ADD"
    },
    "1301": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1303": {
      "op": "ADD"
    },
    "1304": {
      "op": "SWAP3"
    },
    "1305": {
      "op": "SWAP2"
    },
    "1306": {
      "op": "POP"
    },
    "1307": {
      "op": "POP"
    },
    "1308": {
      "jump": "o",
      "op": "JUMP"
    },
    "1309": {
      "op": "JUMPDEST"
    },
    "1310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1312": {
      "op": "DUP7"
    },
    "1313": {
      "op": "MLOAD"
    },
    "1314": {
      "op": "PUSH2",
      "value": "0x52F"
    },
    "1317": {
      "op": "DUP2"
    },
    "1318": {
      "op": "DUP5"
    },
    "1319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1321": {
      "op": "DUP12"
    },
    "1322": {
      "op": "ADD"
    },
    "1323": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1326": {
      "jump": "i",
      "op": "JUMP"
    },
    "1327": {
      "op": "JUMPDEST"
    },
    "1328": {
      "op": "DUP7"
    },
    "1329": {
      "op": "MLOAD"
    },
    "1330": {
      "op": "SWAP1"
    },
    "1331": {
      "op": "DUP4"
    },
    "1332": {
      "op": "ADD"
    },
    "1333": {
      "op": "SWAP1"
    },
    "1334": {
      "op": "PUSH2",
      "value": "0x543"
    },
    "1337": {
      "op": "DUP2"
    },
    "1338": {
      "op": "DUP4"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1341": {
      "op": "DUP12"
    },
    "1342": {
      "op": "ADD"
    },
    "1343": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1346": {
      "jump": "i",
      "op": "JUMP"
    },
    "1347": {
      "op": "JUMPDEST"
    },
    "1348": {
      "op": "DUP7"
    },
    "1349": {
      "op": "MLOAD"
    },
    "1350": {
      "op": "SWAP2"
    },
    "1351": {
      "op": "ADD"
    },
    "1352": {
      "op": "SWAP1"
    },
    "1353": {
      "op": "PUSH2",
      "value": "0x556"
    },
    "1356": {
      "op": "DUP2"
    },
    "1357": {
      "op": "DUP4"
    },
    "1358": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1360": {
      "op": "DUP11"
    },
    "1361": {
      "op": "ADD"
    },
    "1362": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1365": {
      "jump": "i",
      "op": "JUMP"
    },
    "1366": {
      "op": "JUMPDEST"
    },
    "1367": {
      "op": "DUP6"
    },
    "1368": {
      "op": "MLOAD"
    },
    "1369": {
      "op": "SWAP2"
    },
    "1370": {
      "op": "ADD"
    },
    "1371": {
      "op": "SWAP1"
    },
    "1372": {
      "op": "PUSH2",
      "value": "0x569"
    },
    "1375": {
      "op": "DUP2"
    },
    "1376": {
      "op": "DUP4"
    },
    "1377": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1379": {
      "op": "DUP10"
    },
    "1380": {
      "op": "ADD"
    },
    "1381": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1384": {
      "jump": "i",
      "op": "JUMP"
    },
    "1385": {
      "op": "JUMPDEST"
    },
    "1386": {
      "op": "DUP5"
    },
    "1387": {
      "op": "MLOAD"
    },
    "1388": {
      "op": "SWAP2"
    },
    "1389": {
      "op": "ADD"
    },
    "1390": {
      "op": "SWAP1"
    },
    "1391": {
      "op": "PUSH2",
      "value": "0x57C"
    },
    "1394": {
      "op": "DUP2"
    },
    "1395": {
      "op": "DUP4"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1398": {
      "op": "DUP9"
    },
    "1399": {
      "op": "ADD"
    },
    "1400": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1403": {
      "jump": "i",
      "op": "JUMP"
    },
    "1404": {
      "op": "JUMPDEST"
    },
    "1405": {
      "op": "ADD"
    },
    "1406": {
      "op": "SWAP8"
    },
    "1407": {
      "op": "SWAP7"
    },
    "1408": {
      "op": "POP"
    },
    "1409": {
      "op": "POP"
    },
    "1410": {
      "op": "POP"
    },
    "1411": {
      "op": "POP"
    },
    "1412": {
      "op": "POP"
    },
    "1413": {
      "op": "POP"
    },
    "1414": {
      "op": "POP"
    },
    "1415": {
      "jump": "o",
      "op": "JUMP"
    },
    "1416": {
      "op": "JUMPDEST"
    },
    "1417": {
      "op": "PUSH32",
      "value": "0x646174613A696D6167652F7376672B786D6C3B6261736536342C000000000000"
    },
    "1450": {
      "op": "DUP2"
    },
    "1451": {
      "op": "MSTORE"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1454": {
      "op": "DUP3"
    },
    "1455": {
      "op": "MLOAD"
    },
    "1456": {
      "op": "PUSH2",
      "value": "0x5C0"
    },
    "1459": {
      "op": "DUP2"
    },
    "1460": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1462": {
      "op": "DUP6"
    },
    "1463": {
      "op": "ADD"
    },
    "1464": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1466": {
      "op": "DUP8"
    },
    "1467": {
      "op": "ADD"
    },
    "1468": {
      "op": "PUSH2",
      "value": "0x4BA"
    },
    "1471": {
      "jump": "i",
      "op": "JUMP"
    },
    "1472": {
      "op": "JUMPDEST"
    },
    "1473": {
      "op": "SWAP2"
    },
    "1474": {
      "op": "SWAP1"
    },
    "1475": {
      "op": "SWAP2"
    },
    "1476": {
      "op": "ADD"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1479": {
      "op": "ADD"
    },
    "1480": {
      "op": "SWAP3"
    },
    "1481": {
      "op": "SWAP2"
    },
    "1482": {
      "op": "POP"
    },
    "1483": {
      "op": "POP"
    },
    "1484": {
      "jump": "o",
      "op": "JUMP"
    },
    "1485": {
      "op": "JUMPDEST"
    },
    "1486": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1491": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1493": {
      "op": "SHL"
    },
    "1494": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1496": {
      "op": "MSTORE"
    },
    "1497": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1499": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1501": {
      "op": "MSTORE"
    },
    "1502": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1506": {
      "op": "REVERT"
    },
    "1507": {
      "op": "JUMPDEST"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1512": {
      "op": "DUP3"
    },
    "1513": {
      "op": "ADD"
    },
    "1514": {
      "op": "PUSH2",
      "value": "0x5F5"
    },
    "1517": {
      "op": "JUMPI"
    },
    "1518": {
      "op": "PUSH2",
      "value": "0x5F5"
    },
    "1521": {
      "op": "PUSH2",
      "value": "0x5CD"
    },
    "1524": {
      "jump": "i",
      "op": "JUMP"
    },
    "1525": {
      "op": "JUMPDEST"
    },
    "1526": {
      "op": "POP"
    },
    "1527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1529": {
      "op": "ADD"
    },
    "1530": {
      "op": "SWAP1"
    },
    "1531": {
      "jump": "o",
      "op": "JUMP"
    },
    "1532": {
      "op": "JUMPDEST"
    },
    "1533": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1538": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1540": {
      "op": "SHL"
    },
    "1541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1543": {
      "op": "MSTORE"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "1546": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1548": {
      "op": "MSTORE"
    },
    "1549": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1553": {
      "op": "REVERT"
    },
    "1554": {
      "op": "JUMPDEST"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1557": {
      "op": "DUP3"
    },
    "1558": {
      "op": "PUSH2",
      "value": "0x621"
    },
    "1561": {
      "op": "JUMPI"
    },
    "1562": {
      "op": "PUSH2",
      "value": "0x621"
    },
    "1565": {
      "op": "PUSH2",
      "value": "0x5FC"
    },
    "1568": {
      "jump": "i",
      "op": "JUMP"
    },
    "1569": {
      "op": "JUMPDEST"
    },
    "1570": {
      "op": "POP"
    },
    "1571": {
      "op": "DIV"
    },
    "1572": {
      "op": "SWAP1"
    },
    "1573": {
      "jump": "o",
      "op": "JUMP"
    },
    "1574": {
      "op": "JUMPDEST"
    },
    "1575": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1582": {
      "op": "SHL"
    },
    "1583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1585": {
      "op": "MSTORE"
    },
    "1586": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1588": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1590": {
      "op": "MSTORE"
    },
    "1591": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1595": {
      "op": "REVERT"
    },
    "1596": {
      "op": "JUMPDEST"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1599": {
      "op": "DUP3"
    },
    "1600": {
      "op": "DUP3"
    },
    "1601": {
      "op": "LT"
    },
    "1602": {
      "op": "ISZERO"
    },
    "1603": {
      "op": "PUSH2",
      "value": "0x64E"
    },
    "1606": {
      "op": "JUMPI"
    },
    "1607": {
      "op": "PUSH2",
      "value": "0x64E"
    },
    "1610": {
      "op": "PUSH2",
      "value": "0x5CD"
    },
    "1613": {
      "jump": "i",
      "op": "JUMP"
    },
    "1614": {
      "op": "JUMPDEST"
    },
    "1615": {
      "op": "POP"
    },
    "1616": {
      "op": "SUB"
    },
    "1617": {
      "op": "SWAP1"
    },
    "1618": {
      "jump": "o",
      "op": "JUMP"
    },
    "1619": {
      "op": "JUMPDEST"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1622": {
      "op": "DUP3"
    },
    "1623": {
      "op": "PUSH2",
      "value": "0x662"
    },
    "1626": {
      "op": "JUMPI"
    },
    "1627": {
      "op": "PUSH2",
      "value": "0x662"
    },
    "1630": {
      "op": "PUSH2",
      "value": "0x5FC"
    },
    "1633": {
      "jump": "i",
      "op": "JUMP"
    },
    "1634": {
      "op": "JUMPDEST"
    },
    "1635": {
      "op": "POP"
    },
    "1636": {
      "op": "MOD"
    },
    "1637": {
      "op": "SWAP1"
    },
    "1638": {
      "jump": "o",
      "op": "JUMP"
    },
    "1639": {
      "op": "JUMPDEST"
    },
    "1640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1642": {
      "op": "DUP3"
    },
    "1643": {
      "op": "NOT"
    },
    "1644": {
      "op": "DUP3"
    },
    "1645": {
      "op": "GT"
    },
    "1646": {
      "op": "ISZERO"
    },
    "1647": {
      "op": "PUSH2",
      "value": "0x67A"
    },
    "1650": {
      "op": "JUMPI"
    },
    "1651": {
      "op": "PUSH2",
      "value": "0x67A"
    },
    "1654": {
      "op": "PUSH2",
      "value": "0x5CD"
    },
    "1657": {
      "jump": "i",
      "op": "JUMP"
    },
    "1658": {
      "op": "JUMPDEST"
    },
    "1659": {
      "op": "POP"
    },
    "1660": {
      "op": "ADD"
    },
    "1661": {
      "op": "SWAP1"
    },
    "1662": {
      "jump": "o",
      "op": "JUMP"
    },
    "1663": {
      "op": "JUMPDEST"
    },
    "1664": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1669": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1671": {
      "op": "SHL"
    },
    "1672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1674": {
      "op": "MSTORE"
    },
    "1675": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "1677": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1679": {
      "op": "MSTORE"
    },
    "1680": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1682": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1684": {
      "op": "REVERT"
    },
    "1685": {
      "op": "JUMPDEST"
    },
    "1686": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1688": {
      "op": "DUP2"
    },
    "1689": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1691": {
      "op": "NOT"
    },
    "1692": {
      "op": "DIV"
    },
    "1693": {
      "op": "DUP4"
    },
    "1694": {
      "op": "GT"
    },
    "1695": {
      "op": "DUP3"
    },
    "1696": {
      "op": "ISZERO"
    },
    "1697": {
      "op": "ISZERO"
    },
    "1698": {
      "op": "AND"
    },
    "1699": {
      "op": "ISZERO"
    },
    "1700": {
      "op": "PUSH2",
      "value": "0x6AF"
    },
    "1703": {
      "op": "JUMPI"
    },
    "1704": {
      "op": "PUSH2",
      "value": "0x6AF"
    },
    "1707": {
      "op": "PUSH2",
      "value": "0x5CD"
    },
    "1710": {
      "jump": "i",
      "op": "JUMP"
    },
    "1711": {
      "op": "JUMPDEST"
    },
    "1712": {
      "op": "POP"
    },
    "1713": {
      "op": "MUL"
    },
    "1714": {
      "op": "SWAP1"
    },
    "1715": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "9d7e50c7c06a3123392a225d445ad7bfe6d6e8b2",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../utils/Strings.sol\";\nimport \"../utils/Base64.sol\";\n\n// BadgeFactory that will be used by EXPerienceNFT \n// to generate badges that support necessary update passed in\n// by tokenURI() function call \nlibrary BadgeFactory {\n    // Define our SVG - We are capping our viewbox to 300 300 \n    // SVG containers \n\n    // Finally found a solution to intergate css animation and svg inside an svg. Current output is satisfying \n    // with expected quality expectations matching. Still requires continuous updates and improvements\n    string internal constant _svgCont_Start = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 300\"> <style type=\"text/css\"> <![CDATA[ *, *:before, *:after { box-sizing: border-box;} body { height: 100vh; background: #000;} .center { height: 100%; display: flex; align-items: center; justify-content: center; text-align: center;} .circle { position: relative; width: 200px; height: 200px; color: #fff; background: #000; border-radius: 50%; border: 2px solid;} .logo { font-size: 125px; line-height: 190px; vertical-align: middle;} .button { position: absolute; bottom: 0px; left: 0; right: 0; padding: 8px; font-weight: bold; text-transform: uppercase; background: #000; border: 2px solid; animation: slide 1.4s ease-in-out infinite; cursor: pointer;} .button:hover { color: #000; background: #fff; border-color: #fff;} @keyframes slide { 0% { transform: translateX(10px) } 50% {transform: translateX(-10px) } 100% { transform: translateX(10px) }} .text { position: absolute; top: 0; left: 0; width: 100%; height: 100%; font-size: 24px; font-weight: bold; text-transform: uppercase; animation: rotate 14s linear infinite; fill: #fff;} @keyframes rotate { from { transform: rotate(0); } to { transform: rotate(360deg); }} ]]> </style> <foreignObject x=\"20\" y=\"20\" width=\"300\" height=\"300\"> <div class=\"center\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"circle\" xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"logo\" xmlns=\"http://www.w3.org/1999/xhtml\">II</div><div class=\"text\" xmlns=\"http://www.w3.org/1999/xhtml\">  <svg x=\"0\" y=\"0\" viewBox=\"0 0 300 300\" enable-background=\"new 0 0 300 300\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"> <defs> <path id=\"circlePath\" d=\" M 150, 150 m -120, 0 a 120,120 0 0,1 240,0 a 120,120 0 0,1 -240,0 \"  /> </defs> <g> <text> <textPath href=\"#circlePath\" xml:space=\"preserve\">EXPerience NFT!         For.EthernautDAO         Level - ';\n\n    string internal constant _svgCont_Mid = '</textPath></text></g></svg></div><div class=\"button\" xmlns=\"http://www.w3.org/1999/xhtml\">[EXP] Balance - ';\n\n    string internal constant _svgCont_End = '</div></div></div></foreignObject></svg>';\n\n    // Get experience level based on EXP token amount being held by user \n    // The easiest I could come up with in order to prototype this\n    function _getExperienceLevel(uint256 _tokenAmount) internal pure returns (string memory) {\n        if(_tokenAmount > 0 && _tokenAmount <= 20 * 10 ** 18)\n            return \"I\";\n        else if(_tokenAmount > 20 * 10 ** 18 && _tokenAmount <= 40 * 10 ** 18)\n            return \"II\";\n        else if(_tokenAmount > 40 * 10 ** 18 && _tokenAmount <= 60 * 10 ** 18)\n            return \"III\";\n        else if(_tokenAmount > 60 * 10 ** 18 && _tokenAmount <= 80 * 10 ** 18)\n            return \"IV\";\n        else \n            return \"-G-\";\n    }\n\n    // Base64 encoded version of the svg container with styles added\n    // Now our SVG container contains enough information about person holding the NFT, their EXP balance \n    // Everything on-chain (The exciting part or the part that motivates me further to develop better solutions) \n    function _base64EncodeImage(uint256 _tokenAmount) internal pure returns (string memory) {\n        string memory _returning_svg = Base64.encode(abi.encodePacked(\n                _svgCont_Start,\n                _getExperienceLevel(_tokenAmount),  \n                _svgCont_Mid,\n                Strings.toString(_tokenAmount),\n                _svgCont_End \n            ));\n\n        return string(abi.encodePacked(\"data:image/svg+xml;base64,\", _returning_svg)); \n    }\n\n    function callthisForImage(uint256 _tokenAmount) public pure returns (string memory) {\n        string memory _returning_svg = Base64.encode(abi.encodePacked(\n                _svgCont_Start,\n                _getExperienceLevel(_tokenAmount),  \n                _svgCont_Mid,\n                Strings.toString(_tokenAmount),\n                _svgCont_End \n            ));\n\n        return string(abi.encodePacked(\"data:image/svg+xml;base64,\", _returning_svg)); \n    }\n\n    // Styles for the image \n    //function _getStyleForAnimation() internal pure returns (string memory) {\n        // If ever required internal styles, use this function\n    //}\n\n    // Now the main function that will handle generating actual token url \n    /// @param _nftID - NFT token ID for which this function call is happening \n    /// @param _tokenAmount - Value of total EXP Token the owner of the NFT has \n    function _generateTokenURI(uint256 _nftID, uint256 _tokenAmount, address _owner) internal pure returns (string memory tokenURI) {\n        // Get our image url prepared with _tokenAmount \n        string memory _imgUrl = _base64EncodeImage(_tokenAmount);\n        // Get experience level that can be show in the middle of the image \n        string memory _expLevel = _getExperienceLevel(_tokenAmount);\n        \n        // Json that will be returned when tokenURI function request is received \n        // This prepared the expected response format, including all the necessary data \n        // to display image after call to tokenURI\n        bytes memory _metaJson_start = abi.encodePacked(\n            '{ \"name\": \"EXPerience NFT - ',\n            Strings.toString(_nftID),\n            '\"description\": \"EXPerience NFT. Part of Ethernaut DAO bounties. Soulbound token/asset experience through EXP Token and EXPerience NFT.',\n            '\", \"external_url\": \"https://github.com/SolDev-HP/EXPerience_Game\"',\n            ', \"attributes\": [{\"trait_type\": \"EXPerience Level\", \"value\": \"',\n            _expLevel,\n            '\"}], \"owner\": \"'\n        );\n\n        bytes memory _metaJson_end = abi.encodePacked(\n            _metaJson_start,\n            _owner,\n            '\", \"image\": \"',\n            _imgUrl,\n            '\", \"animation_url\": \"',\n            _imgUrl,\n            '\"}'\n        );\n        \n        tokenURI = string(\n            abi.encodePacked(\n                'data:application/json;base64,',\n                Base64.encode(_metaJson_end)\n            )\n        );\n    }\n}",
  "sourceMap": "275:6469:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;275:6469:3;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/libs/BadgeFactory.sol",
  "type": "library"
}