{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/ERC165.sol",
    "1": "contracts/ERC165Storage.sol",
    "9": "interfaces/introspection/local/IERC165.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC165Storage.sol",
    "exportedSymbols": {
      "ERC165": [
        926
      ],
      "ERC165Storage": [
        738
      ],
      "IERC165": [
        938
      ]
    },
    "id": 739,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 669,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:24:1"
      },
      {
        "absolutePath": "contracts/ERC165.sol",
        "file": "./ERC165.sol",
        "id": 670,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 739,
        "sourceUnit": 927,
        "src": "61:22:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 672,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 926,
              "src": "698:6:1"
            },
            "id": 673,
            "nodeType": "InheritanceSpecifier",
            "src": "698:6:1"
          }
        ],
        "canonicalName": "ERC165Storage",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 671,
          "nodeType": "StructuredDocumentation",
          "src": "87:576:1",
          "text": "@dev Updates to the contract. Switching to mapping approach for local introspection \n @dev from eip165 - With three or more supported interfaces (including ERC165 itself as a required supported interface), \n @dev the mapping approach (in every case) costs less gas than the pure approach (at worst case).\n @dev This would mean adding ERC165Storage base class instead of ERC165, some modification on how I'm using \n @dev introspection. Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Storage.sol"
        },
        "fullyImplemented": true,
        "id": 738,
        "linearizedBaseContracts": [
          738,
          926,
          938
        ],
        "name": "ERC165Storage",
        "nameLocation": "681:13:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 674,
              "nodeType": "StructuredDocumentation",
              "src": "712:134:1",
              "text": "@dev mapping of all supported interfaces \n @notice you MUST NOT/NEVER set element 0xffffffff (Invalid InterfaceID) to true"
            },
            "id": 678,
            "mutability": "mutable",
            "name": "_supportedInterfaces",
            "nameLocation": "884:20:1",
            "nodeType": "VariableDeclaration",
            "scope": 738,
            "src": "852:52:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
              "typeString": "mapping(bytes4 => bool)"
            },
            "typeName": {
              "id": 677,
              "keyType": {
                "id": 675,
                "name": "bytes4",
                "nodeType": "ElementaryTypeName",
                "src": "860:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                }
              },
              "nodeType": "Mapping",
              "src": "852:23:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                "typeString": "mapping(bytes4 => bool)"
              },
              "valueType": {
                "id": 676,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "870:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "private"
          },
          {
            "baseFunctions": [
              925
            ],
            "body": {
              "id": 696,
              "nodeType": "Block",
              "src": "1181:99:1",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 689,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 681,
                          "src": "1223:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        ],
                        "expression": {
                          "id": 687,
                          "name": "super",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -25,
                          "src": "1199:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_super$_ERC165Storage_$738_$",
                            "typeString": "type(contract super ERC165Storage)"
                          }
                        },
                        "id": 688,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "supportsInterface",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 925,
                        "src": "1199:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                          "typeString": "function (bytes4) view returns (bool)"
                        }
                      },
                      "id": 690,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1199:36:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "baseExpression": {
                        "id": 691,
                        "name": "_supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 678,
                        "src": "1239:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 693,
                      "indexExpression": {
                        "id": 692,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 681,
                        "src": "1260:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "1239:33:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1199:73:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 686,
                  "id": 695,
                  "nodeType": "Return",
                  "src": "1192:80:1"
                }
              ]
            },
            "documentation": {
              "id": 679,
              "nodeType": "StructuredDocumentation",
              "src": "911:173:1",
              "text": " @dev See {IERC165:supportsInterface()}\n @dev An update would be checking base class first for the given interfacId, and then verify in storage  "
            },
            "functionSelector": "01ffc9a7",
            "id": 697,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "1099:17:1",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 683,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1157:8:1"
            },
            "parameters": {
              "id": 682,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 681,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "1124:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 697,
                  "src": "1117:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 680,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1117:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1116:20:1"
            },
            "returnParameters": {
              "id": 686,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 685,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 697,
                  "src": "1175:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 684,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1175:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1174:6:1"
            },
            "scope": 738,
            "src": "1090:190:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 716,
              "nodeType": "Block",
              "src": "1499:135:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 704,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 700,
                          "src": "1518:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30786666666666666666",
                          "id": 705,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1533:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_4294967295_by_1",
                            "typeString": "int_const 4294967295"
                          },
                          "value": "0xffffffff"
                        },
                        "src": "1518:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433136353a20496e76616c696420496e746572666163654944",
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1545:29:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e69f91510b3a770d35be8cbb240366e276f2ef2f41a1a771ac159b0fe5379b3a",
                          "typeString": "literal_string \"ERC165: Invalid InterfaceID\""
                        },
                        "value": "ERC165: Invalid InterfaceID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e69f91510b3a770d35be8cbb240366e276f2ef2f41a1a771ac159b0fe5379b3a",
                          "typeString": "literal_string \"ERC165: Invalid InterfaceID\""
                        }
                      ],
                      "id": 703,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1510:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1510:65:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 709,
                  "nodeType": "ExpressionStatement",
                  "src": "1510:65:1"
                },
                {
                  "expression": {
                    "id": 714,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 710,
                        "name": "_supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 678,
                        "src": "1586:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 712,
                      "indexExpression": {
                        "id": 711,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 700,
                        "src": "1607:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1586:33:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 713,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1622:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1586:40:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 715,
                  "nodeType": "ExpressionStatement",
                  "src": "1586:40:1"
                }
              ]
            },
            "documentation": {
              "id": 698,
              "nodeType": "StructuredDocumentation",
              "src": "1288:140:1",
              "text": " @dev internal method to register interfaceId, \n @dev should check for 0xffffffff (Invalid InterfaceID) as input "
            },
            "id": 717,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_registerInterface",
            "nameLocation": "1443:18:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 700,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "1469:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 717,
                  "src": "1462:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 699,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1462:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1461:20:1"
            },
            "returnParameters": {
              "id": 702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1499:0:1"
            },
            "scope": 738,
            "src": "1434:200:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 736,
              "nodeType": "Block",
              "src": "2155:136:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 724,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 720,
                          "src": "2174:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30786666666666666666",
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2189:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_4294967295_by_1",
                            "typeString": "int_const 4294967295"
                          },
                          "value": "0xffffffff"
                        },
                        "src": "2174:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433136353a20496e76616c696420496e746572666163654944",
                        "id": 727,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2201:29:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e69f91510b3a770d35be8cbb240366e276f2ef2f41a1a771ac159b0fe5379b3a",
                          "typeString": "literal_string \"ERC165: Invalid InterfaceID\""
                        },
                        "value": "ERC165: Invalid InterfaceID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e69f91510b3a770d35be8cbb240366e276f2ef2f41a1a771ac159b0fe5379b3a",
                          "typeString": "literal_string \"ERC165: Invalid InterfaceID\""
                        }
                      ],
                      "id": 723,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2166:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2166:65:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 729,
                  "nodeType": "ExpressionStatement",
                  "src": "2166:65:1"
                },
                {
                  "expression": {
                    "id": 734,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 730,
                        "name": "_supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 678,
                        "src": "2242:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 732,
                      "indexExpression": {
                        "id": 731,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 720,
                        "src": "2263:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2242:33:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 733,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2278:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2242:41:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 735,
                  "nodeType": "ExpressionStatement",
                  "src": "2242:41:1"
                }
              ]
            },
            "documentation": {
              "id": 718,
              "nodeType": "StructuredDocumentation",
              "src": "1642:440:1",
              "text": " @dev internal method to un-register an interface, I don't yet know all the possible usecase where \n there might be a requirement to un-register to continuously maintain interfaces supporting/unsupporting \n at any given time. May turn out to be stupid, but keeping it for learning purposes. \n @dev should check for 0xffffffff (Invalid InterfaceID) as input, function shouldn't assume correct input. "
            },
            "id": 737,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_unregisterInterface",
            "nameLocation": "2097:20:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 721,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 720,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2125:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 737,
                  "src": "2118:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 719,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2118:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2117:20:1"
            },
            "returnParameters": {
              "id": 722,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2155:0:1"
            },
            "scope": 738,
            "src": "2088:203:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 739,
        "src": "663:1631:1",
        "usedErrors": []
      }
    ],
    "src": "33:2261:1"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "ERC165Storage",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "ERC165",
    "IERC165"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Updates to the contract. Switching to mapping approach for local introspection from eip165 - With three or more supported interfaces (including ERC165 itself as a required supported interface), the mapping approach (in every case) costs less gas than the pure approach (at worst case).This would mean adding ERC165Storage base class instead of ERC165, some modification on how I'm using introspection. Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Storage.sol",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165:supportsInterface()}An update would be checking base class first for the given interfacId, and then verify in storage  "
      }
    },
    "stateVariables": {
      "_supportedInterfaces": {
        "details": "mapping of all supported interfaces "
      }
    },
    "version": 1
  },
  "offset": [
    663,
    2294
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "beae57d75e6b575ef784896b4f483210f1d98ced",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./ERC165.sol\";\n\n/// @dev Updates to the contract. Switching to mapping approach for local introspection \n/// @dev from eip165 - With three or more supported interfaces (including ERC165 itself as a required supported interface), \n/// @dev the mapping approach (in every case) costs less gas than the pure approach (at worst case).\n/// @dev This would mean adding ERC165Storage base class instead of ERC165, some modification on how I'm using \n/// @dev introspection. Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Storage.sol\nabstract contract ERC165Storage is ERC165 {\n    /// @dev mapping of all supported interfaces \n    /// @notice you MUST NOT/NEVER set element 0xffffffff (Invalid InterfaceID) to true\n    mapping(bytes4 => bool) private _supportedInterfaces;\n    /** \n     * @dev See {IERC165:supportsInterface()}\n     * @dev An update would be checking base class first for the given interfacId, and then verify in storage  \n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method to register interfaceId, \n     * @dev should check for 0xffffffff (Invalid InterfaceID) as input \n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: Invalid InterfaceID\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    /**\n     * @dev internal method to un-register an interface, I don't yet know all the possible usecase where \n     * there might be a requirement to un-register to continuously maintain interfaces supporting/unsupporting \n     * at any given time. May turn out to be stupid, but keeping it for learning purposes. \n     * @dev should check for 0xffffffff (Invalid InterfaceID) as input, function shouldn't assume correct input. \n     */\n    function _unregisterInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: Invalid InterfaceID\");\n        _supportedInterfaces[interfaceId] = false;\n    }\n}",
  "sourceMap": "",
  "sourcePath": "contracts/ERC165Storage.sol",
  "type": "contract"
}