{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OperationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/ERC165.sol",
    "1": "contracts/ERC165Storage.sol",
    "10": "interfaces/extensions/IERC20Metadata.sol",
    "12": "interfaces/introspection/local/IERC165.sol",
    "2": "contracts/ERC20.sol",
    "6": "contracts/utils/Context.sol",
    "8": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        1293
      ],
      "ERC165": [
        22
      ],
      "ERC165Storage": [
        93
      ],
      "ERC20": [
        478
      ],
      "IERC165": [
        1271
      ],
      "IERC20": [
        1372
      ],
      "IERC20Metadata": [
        1397
      ]
    },
    "id": 479,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 95,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:2"
      },
      {
        "absolutePath": "contracts/ERC165Storage.sol",
        "file": "./ERC165Storage.sol",
        "id": 96,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 479,
        "sourceUnit": 94,
        "src": "58:29:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 97,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 479,
        "sourceUnit": 1373,
        "src": "88:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/extensions/IERC20Metadata.sol",
        "file": "../interfaces/extensions/IERC20Metadata.sol",
        "id": 98,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 479,
        "sourceUnit": 1398,
        "src": "123:53:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/utils/Context.sol",
        "file": "./utils/Context.sol",
        "id": 99,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 479,
        "sourceUnit": 1294,
        "src": "177:29:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 101,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1293,
              "src": "1921:7:2"
            },
            "id": 102,
            "nodeType": "InheritanceSpecifier",
            "src": "1921:7:2"
          },
          {
            "baseName": {
              "id": 103,
              "name": "ERC165Storage",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 93,
              "src": "1930:13:2"
            },
            "id": 104,
            "nodeType": "InheritanceSpecifier",
            "src": "1930:13:2"
          },
          {
            "baseName": {
              "id": 105,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1372,
              "src": "1945:6:2"
            },
            "id": 106,
            "nodeType": "InheritanceSpecifier",
            "src": "1945:6:2"
          },
          {
            "baseName": {
              "id": 107,
              "name": "IERC20Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1397,
              "src": "1953:14:2"
            },
            "id": 108,
            "nodeType": "InheritanceSpecifier",
            "src": "1953:14:2"
          }
        ],
        "canonicalName": "ERC20",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 100,
          "nodeType": "StructuredDocumentation",
          "src": "396:1172:2",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 478,
        "linearizedBaseContracts": [
          478,
          1397,
          1372,
          93,
          22,
          1271,
          1293
        ],
        "name": "ERC20",
        "nameLocation": "1912:5:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 112,
            "mutability": "mutable",
            "name": "_balances",
            "nameLocation": "2010:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 478,
            "src": "1974:45:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 111,
              "keyType": {
                "id": 109,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1982:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1974:27:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 110,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1993:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 114,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nameLocation": "2042:12:2",
            "nodeType": "VariableDeclaration",
            "scope": 478,
            "src": "2026:28:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 113,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2026:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 116,
            "mutability": "mutable",
            "name": "_name",
            "nameLocation": "2076:5:2",
            "nodeType": "VariableDeclaration",
            "scope": 478,
            "src": "2061:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 115,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2061:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 118,
            "mutability": "mutable",
            "name": "_symbol",
            "nameLocation": "2102:7:2",
            "nodeType": "VariableDeclaration",
            "scope": 478,
            "src": "2087:22:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 117,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2087:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "errorSelector": "f50a3b52",
            "id": 120,
            "name": "OperationNotAllowed",
            "nameLocation": "2329:19:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 119,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2348:2:2"
            },
            "src": "2323:28:2"
          },
          {
            "errorSelector": "25e9714f",
            "id": 122,
            "name": "UnsupportedAction",
            "nameLocation": "2406:17:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 121,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2423:2:2"
            },
            "src": "2400:26:2"
          },
          {
            "body": {
              "id": 152,
              "nodeType": "Block",
              "src": "2790:321:2",
              "statements": [
                {
                  "expression": {
                    "id": 132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 130,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "2800:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 131,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 125,
                      "src": "2808:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2800:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 133,
                  "nodeType": "ExpressionStatement",
                  "src": "2800:13:2"
                },
                {
                  "expression": {
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 134,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 118,
                      "src": "2823:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 135,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 127,
                      "src": "2833:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2823:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 137,
                  "nodeType": "ExpressionStatement",
                  "src": "2823:17:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 140,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1372,
                              "src": "3022:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$1372_$",
                                "typeString": "type(contract IERC20)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$1372_$",
                                "typeString": "type(contract IERC20)"
                              }
                            ],
                            "id": 139,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3017:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 141,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3017:12:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC20_$1372",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3017:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 138,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "2998:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2998:44:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 144,
                  "nodeType": "ExpressionStatement",
                  "src": "2998:44:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 147,
                              "name": "IERC20Metadata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1397,
                              "src": "3076:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1397_$",
                                "typeString": "type(contract IERC20Metadata)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1397_$",
                                "typeString": "type(contract IERC20Metadata)"
                              }
                            ],
                            "id": 146,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3071:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 148,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3071:20:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC20Metadata_$1397",
                            "typeString": "type(contract IERC20Metadata)"
                          }
                        },
                        "id": 149,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3071:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "id": 145,
                      "name": "_registerInterface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "3052:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4)"
                      }
                    },
                    "id": 150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3052:52:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 151,
                  "nodeType": "ExpressionStatement",
                  "src": "3052:52:2"
                }
              ]
            },
            "documentation": {
              "id": 123,
              "nodeType": "StructuredDocumentation",
              "src": "2431:298:2",
              "text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 153,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 125,
                  "mutability": "mutable",
                  "name": "name_",
                  "nameLocation": "2760:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 153,
                  "src": "2746:19:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 124,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2746:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 127,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nameLocation": "2781:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 153,
                  "src": "2767:21:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 126,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2767:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2745:44:2"
            },
            "returnParameters": {
              "id": 129,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2790:0:2"
            },
            "scope": 478,
            "src": "2734:377:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              52
            ],
            "body": {
              "id": 168,
              "nodeType": "Block",
              "src": "3284:60:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 165,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 156,
                        "src": "3325:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "expression": {
                        "id": 163,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3301:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC20_$478_$",
                          "typeString": "type(contract super ERC20)"
                        }
                      },
                      "id": 164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "supportsInterface",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 52,
                      "src": "3301:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                        "typeString": "function (bytes4) view returns (bool)"
                      }
                    },
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3301:36:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 162,
                  "id": 167,
                  "nodeType": "Return",
                  "src": "3294:43:2"
                }
              ]
            },
            "documentation": {
              "id": 154,
              "nodeType": "StructuredDocumentation",
              "src": "3117:56:2",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 169,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "3187:17:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 159,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 158,
                  "name": "ERC165Storage",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 93,
                  "src": "3254:13:2"
                }
              ],
              "src": "3245:23:2"
            },
            "parameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 156,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "3212:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "3205:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 155,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3205:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3204:20:2"
            },
            "returnParameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 161,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "3278:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3278:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3277:6:2"
            },
            "scope": 478,
            "src": "3178:166:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1384
            ],
            "body": {
              "id": 178,
              "nodeType": "Block",
              "src": "3478:29:2",
              "statements": [
                {
                  "expression": {
                    "id": 176,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 116,
                    "src": "3495:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 175,
                  "id": 177,
                  "nodeType": "Return",
                  "src": "3488:12:2"
                }
              ]
            },
            "documentation": {
              "id": 170,
              "nodeType": "StructuredDocumentation",
              "src": "3350:54:2",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 179,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "3418:4:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 172,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3445:8:2"
            },
            "parameters": {
              "id": 171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3422:2:2"
            },
            "returnParameters": {
              "id": 175,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 174,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 179,
                  "src": "3463:13:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 173,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3463:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3462:15:2"
            },
            "scope": 478,
            "src": "3409:98:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1390
            ],
            "body": {
              "id": 188,
              "nodeType": "Block",
              "src": "3691:31:2",
              "statements": [
                {
                  "expression": {
                    "id": 186,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 118,
                    "src": "3708:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 185,
                  "id": 187,
                  "nodeType": "Return",
                  "src": "3701:14:2"
                }
              ]
            },
            "documentation": {
              "id": 180,
              "nodeType": "StructuredDocumentation",
              "src": "3513:102:2",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 189,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "3629:6:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 182,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3658:8:2"
            },
            "parameters": {
              "id": 181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3635:2:2"
            },
            "returnParameters": {
              "id": 185,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 184,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 189,
                  "src": "3676:13:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 183,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3676:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3675:15:2"
            },
            "scope": 478,
            "src": "3620:102:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1396
            ],
            "body": {
              "id": 198,
              "nodeType": "Block",
              "src": "4411:26:2",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4428:2:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 195,
                  "id": 197,
                  "nodeType": "Return",
                  "src": "4421:9:2"
                }
              ]
            },
            "documentation": {
              "id": 190,
              "nodeType": "StructuredDocumentation",
              "src": "3728:613:2",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 199,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "4355:8:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 192,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4386:8:2"
            },
            "parameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4363:2:2"
            },
            "returnParameters": {
              "id": 195,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 194,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 199,
                  "src": "4404:5:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 193,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "4404:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4403:7:2"
            },
            "scope": 478,
            "src": "4346:91:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1321
            ],
            "body": {
              "id": 208,
              "nodeType": "Block",
              "src": "4567:36:2",
              "statements": [
                {
                  "expression": {
                    "id": 206,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 114,
                    "src": "4584:12:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 205,
                  "id": 207,
                  "nodeType": "Return",
                  "src": "4577:19:2"
                }
              ]
            },
            "documentation": {
              "id": 200,
              "nodeType": "StructuredDocumentation",
              "src": "4443:49:2",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 209,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "4506:11:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 202,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4540:8:2"
            },
            "parameters": {
              "id": 201,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4517:2:2"
            },
            "returnParameters": {
              "id": 205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 204,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 209,
                  "src": "4558:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 203,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4558:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4557:9:2"
            },
            "scope": 478,
            "src": "4497:106:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1329
            ],
            "body": {
              "id": 222,
              "nodeType": "Block",
              "src": "4744:42:2",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 218,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 112,
                      "src": "4761:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 220,
                    "indexExpression": {
                      "id": 219,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 212,
                      "src": "4771:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4761:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 217,
                  "id": 221,
                  "nodeType": "Return",
                  "src": "4754:25:2"
                }
              ]
            },
            "documentation": {
              "id": 210,
              "nodeType": "StructuredDocumentation",
              "src": "4609:47:2",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 223,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "4670:9:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 214,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4717:8:2"
            },
            "parameters": {
              "id": 213,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 212,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "4688:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 223,
                  "src": "4680:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 211,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4680:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4679:17:2"
            },
            "returnParameters": {
              "id": 217,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 216,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 223,
                  "src": "4735:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4735:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4734:9:2"
            },
            "scope": 478,
            "src": "4661:125:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1339
            ],
            "body": {
              "id": 237,
              "nodeType": "Block",
              "src": "4943:45:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 234,
                      "name": "OperationNotAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "4960:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 235,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4960:21:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 236,
                  "nodeType": "RevertStatement",
                  "src": "4953:28:2"
                }
              ]
            },
            "documentation": {
              "id": 224,
              "nodeType": "StructuredDocumentation",
              "src": "4792:71:2",
              "text": " @dev See {IERC20-transfer}.\n Restricted"
            },
            "functionSelector": "a9059cbb",
            "id": 238,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "4877:8:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 230,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4919:8:2"
            },
            "parameters": {
              "id": 229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 226,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "4886:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4886:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 228,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "4895:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 227,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4895:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4885:18:2"
            },
            "returnParameters": {
              "id": 233,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 232,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 238,
                  "src": "4937:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 231,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4937:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4936:6:2"
            },
            "scope": 478,
            "src": "4868:120:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1349
            ],
            "body": {
              "id": 252,
              "nodeType": "Block",
              "src": "5156:43:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 249,
                      "name": "UnsupportedAction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 122,
                      "src": "5173:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 250,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5173:19:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 251,
                  "nodeType": "RevertStatement",
                  "src": "5166:26:2"
                }
              ]
            },
            "documentation": {
              "id": 239,
              "nodeType": "StructuredDocumentation",
              "src": "4994:73:2",
              "text": " @dev See {IERC20-allowance}.\n Unsupported"
            },
            "functionSelector": "dd62ed3e",
            "id": 253,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "5081:9:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 245,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5129:8:2"
            },
            "parameters": {
              "id": 244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 241,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 253,
                  "src": "5091:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5091:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 243,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 253,
                  "src": "5100:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 242,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5100:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5090:18:2"
            },
            "returnParameters": {
              "id": 248,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 247,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 253,
                  "src": "5147:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 246,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5147:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5146:9:2"
            },
            "scope": 478,
            "src": "5072:127:2",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1359
            ],
            "body": {
              "id": 267,
              "nodeType": "Block",
              "src": "5355:45:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 264,
                      "name": "OperationNotAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "5372:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5372:21:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 266,
                  "nodeType": "RevertStatement",
                  "src": "5365:28:2"
                }
              ]
            },
            "documentation": {
              "id": 254,
              "nodeType": "StructuredDocumentation",
              "src": "5205:71:2",
              "text": " @dev See {IERC20-approve}.\n Restricted "
            },
            "functionSelector": "095ea7b3",
            "id": 268,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "5290:7:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 260,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5331:8:2"
            },
            "parameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 256,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 268,
                  "src": "5298:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 255,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5298:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 258,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 268,
                  "src": "5307:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 257,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5307:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5297:18:2"
            },
            "returnParameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 268,
                  "src": "5349:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 261,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5349:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5348:6:2"
            },
            "scope": 478,
            "src": "5281:119:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1371
            ],
            "body": {
              "id": 284,
              "nodeType": "Block",
              "src": "5574:45:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 281,
                      "name": "OperationNotAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "5591:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 282,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5591:21:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 283,
                  "nodeType": "RevertStatement",
                  "src": "5584:28:2"
                }
              ]
            },
            "documentation": {
              "id": 269,
              "nodeType": "StructuredDocumentation",
              "src": "5406:75:2",
              "text": " @dev See {IERC20-transferFrom}.\n Restricted"
            },
            "functionSelector": "23b872dd",
            "id": 285,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "5495:12:2",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 277,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5550:8:2"
            },
            "parameters": {
              "id": 276,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 271,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 285,
                  "src": "5508:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 270,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5508:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 273,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 285,
                  "src": "5517:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 272,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5517:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 275,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 285,
                  "src": "5526:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 274,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5526:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5507:27:2"
            },
            "returnParameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 285,
                  "src": "5568:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5568:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5567:6:2"
            },
            "scope": 478,
            "src": "5486:133:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 298,
              "nodeType": "Block",
              "src": "5825:43:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 295,
                      "name": "UnsupportedAction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 122,
                      "src": "5842:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5842:19:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 297,
                  "nodeType": "RevertStatement",
                  "src": "5835:26:2"
                }
              ]
            },
            "documentation": {
              "id": 286,
              "nodeType": "StructuredDocumentation",
              "src": "5625:120:2",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n Unsupported"
            },
            "functionSelector": "39509351",
            "id": 299,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nameLocation": "5759:17:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 291,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 288,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "5777:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 287,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5777:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 290,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "5786:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 289,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5786:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5776:18:2"
            },
            "returnParameters": {
              "id": 294,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 293,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "5819:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 292,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5819:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5818:6:2"
            },
            "scope": 478,
            "src": "5750:118:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 312,
              "nodeType": "Block",
              "src": "6074:43:2",
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 309,
                      "name": "UnsupportedAction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 122,
                      "src": "6091:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 310,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6091:19:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 311,
                  "nodeType": "RevertStatement",
                  "src": "6084:26:2"
                }
              ]
            },
            "documentation": {
              "id": 300,
              "nodeType": "StructuredDocumentation",
              "src": "5874:120:2",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n Unsupported"
            },
            "functionSelector": "a457c2d7",
            "id": 313,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nameLocation": "6008:17:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 305,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 302,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 313,
                  "src": "6026:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 301,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6026:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 304,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 313,
                  "src": "6035:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 303,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6035:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6025:18:2"
            },
            "returnParameters": {
              "id": 308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 307,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 313,
                  "src": "6068:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 306,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6068:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6067:6:2"
            },
            "scope": 478,
            "src": "5999:118:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 368,
              "nodeType": "Block",
              "src": "6458:328:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 322,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 316,
                          "src": "6476:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 325,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6495:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 324,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6487:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 323,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6487:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6487:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6476:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "455850546f6b656e20284d696e74293a204d696e7420746f20416464283029202d2058",
                        "id": 328,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6499:37:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b52e9e9b61b49b6ddbf9ec9d1b963e456f898becd5733e24eeb11386177b132a",
                          "typeString": "literal_string \"EXPToken (Mint): Mint to Add(0) - X\""
                        },
                        "value": "EXPToken (Mint): Mint to Add(0) - X"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b52e9e9b61b49b6ddbf9ec9d1b963e456f898becd5733e24eeb11386177b132a",
                          "typeString": "literal_string \"EXPToken (Mint): Mint to Add(0) - X\""
                        }
                      ],
                      "id": 321,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6468:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6468:69:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 330,
                  "nodeType": "ExpressionStatement",
                  "src": "6468:69:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6577:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6569:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 332,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6569:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6569:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 336,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "6581:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 337,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "6590:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 331,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 466,
                      "src": "6548:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 338,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6548:49:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 339,
                  "nodeType": "ExpressionStatement",
                  "src": "6548:49:2"
                },
                {
                  "expression": {
                    "id": 342,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 340,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 114,
                      "src": "6608:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 341,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 318,
                      "src": "6624:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6608:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 343,
                  "nodeType": "ExpressionStatement",
                  "src": "6608:22:2"
                },
                {
                  "expression": {
                    "id": 348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 344,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 112,
                        "src": "6640:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 346,
                      "indexExpression": {
                        "id": 345,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "6650:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6640:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 347,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 318,
                      "src": "6662:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6640:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 349,
                  "nodeType": "ExpressionStatement",
                  "src": "6640:28:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 353,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6700:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6692:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 351,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6692:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 354,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6692:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 355,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "6704:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 356,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "6713:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 350,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1306,
                      "src": "6683:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6683:37:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 358,
                  "nodeType": "EmitStatement",
                  "src": "6678:42:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6759:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6751:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 360,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6751:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6751:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 364,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "6763:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 365,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "6772:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 359,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 477,
                      "src": "6731:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6731:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 367,
                  "nodeType": "ExpressionStatement",
                  "src": "6731:48:2"
                }
              ]
            },
            "documentation": {
              "id": 314,
              "nodeType": "StructuredDocumentation",
              "src": "6123:265:2",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
            },
            "id": 369,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nameLocation": "6402:5:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 319,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 316,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "6416:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 369,
                  "src": "6408:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 315,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6408:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 318,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "6433:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 369,
                  "src": "6425:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 317,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6425:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6407:33:2"
            },
            "returnParameters": {
              "id": 320,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6458:0:2"
            },
            "scope": 478,
            "src": "6393:393:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 440,
              "nodeType": "Block",
              "src": "7272:520:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 383,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 378,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 372,
                          "src": "7290:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 381,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7309:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 380,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7301:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 379,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7301:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 382,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7301:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7290:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "455850546f6b656e20284275726e293a204275726e2066726f6d20416464283029202d20582e",
                        "id": 384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7313:40:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_882e675f0e3b16e25615e5040da71807b12d1dda0a79870b94a444ea1e9003cd",
                          "typeString": "literal_string \"EXPToken (Burn): Burn from Add(0) - X.\""
                        },
                        "value": "EXPToken (Burn): Burn from Add(0) - X."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_882e675f0e3b16e25615e5040da71807b12d1dda0a79870b94a444ea1e9003cd",
                          "typeString": "literal_string \"EXPToken (Burn): Burn from Add(0) - X.\""
                        }
                      ],
                      "id": 377,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7282:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7282:72:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 386,
                  "nodeType": "ExpressionStatement",
                  "src": "7282:72:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 388,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 372,
                        "src": "7386:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7403:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7395:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 389,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7395:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 392,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7395:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 393,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 374,
                        "src": "7407:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 387,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 466,
                      "src": "7365:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7365:49:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 395,
                  "nodeType": "ExpressionStatement",
                  "src": "7365:49:2"
                },
                {
                  "assignments": [
                    397
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 397,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nameLocation": "7433:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 440,
                      "src": "7425:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 396,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7425:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 401,
                  "initialValue": {
                    "baseExpression": {
                      "id": 398,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 112,
                      "src": "7450:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 400,
                    "indexExpression": {
                      "id": 399,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 372,
                      "src": "7460:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7450:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7425:43:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 405,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 403,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 397,
                          "src": "7486:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 404,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 374,
                          "src": "7504:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7486:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "455850546f6b656e20284275726e293a20496e73756666696369656e742062616c616e63652e",
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7512:40:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_32b953e262fdbe13f39924c21a73b814ca749289784f1b3b9bcacaf8eb480183",
                          "typeString": "literal_string \"EXPToken (Burn): Insufficient balance.\""
                        },
                        "value": "EXPToken (Burn): Insufficient balance."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_32b953e262fdbe13f39924c21a73b814ca749289784f1b3b9bcacaf8eb480183",
                          "typeString": "literal_string \"EXPToken (Burn): Insufficient balance.\""
                        }
                      ],
                      "id": 402,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7478:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7478:75:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 408,
                  "nodeType": "ExpressionStatement",
                  "src": "7478:75:2"
                },
                {
                  "id": 417,
                  "nodeType": "UncheckedBlock",
                  "src": "7563:79:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 409,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 112,
                            "src": "7587:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 411,
                          "indexExpression": {
                            "id": 410,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 372,
                            "src": "7597:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7587:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 412,
                            "name": "accountBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 397,
                            "src": "7608:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 413,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 374,
                            "src": "7625:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7608:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7587:44:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 416,
                      "nodeType": "ExpressionStatement",
                      "src": "7587:44:2"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 420,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 418,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 114,
                      "src": "7651:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 419,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 374,
                      "src": "7667:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7651:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 421,
                  "nodeType": "ExpressionStatement",
                  "src": "7651:22:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 423,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 372,
                        "src": "7698:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7715:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7707:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 424,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7707:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7707:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 428,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 374,
                        "src": "7719:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 422,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1306,
                      "src": "7689:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 429,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7689:37:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 430,
                  "nodeType": "EmitStatement",
                  "src": "7684:42:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 432,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 372,
                        "src": "7757:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 435,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7774:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 434,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7766:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 433,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7766:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7766:10:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 437,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 374,
                        "src": "7778:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 431,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 477,
                      "src": "7737:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7737:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 439,
                  "nodeType": "ExpressionStatement",
                  "src": "7737:48:2"
                }
              ]
            },
            "documentation": {
              "id": 370,
              "nodeType": "StructuredDocumentation",
              "src": "6792:410:2",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n \n Changes:\n - Remove require, instead revert with custom error to save gas"
            },
            "id": 441,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "7216:5:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 372,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "7230:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 441,
                  "src": "7222:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 371,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7222:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 374,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "7247:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 441,
                  "src": "7239:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 373,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7239:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7221:33:2"
            },
            "returnParameters": {
              "id": 376,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7272:0:2"
            },
            "scope": 478,
            "src": "7207:585:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 454,
              "nodeType": "Block",
              "src": "7984:65:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 451,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "8034:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 452,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8034:8:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 453,
                  "nodeType": "ExpressionStatement",
                  "src": "8034:8:2"
                }
              ]
            },
            "documentation": {
              "id": 442,
              "nodeType": "StructuredDocumentation",
              "src": "7798:119:2",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n Restricted"
            },
            "id": 455,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nameLocation": "7931:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 444,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "7940:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 443,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7940:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 446,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "7949:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 445,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7949:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 448,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "7958:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 447,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7958:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7939:27:2"
            },
            "returnParameters": {
              "id": 450,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7984:0:2"
            },
            "scope": 478,
            "src": "7922:127:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 465,
              "nodeType": "Block",
              "src": "8752:2:2",
              "statements": []
            },
            "documentation": {
              "id": 456,
              "nodeType": "StructuredDocumentation",
              "src": "8055:573:2",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 466,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "8642:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 458,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "8680:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 466,
                  "src": "8672:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 457,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8672:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 460,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "8702:2:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 466,
                  "src": "8694:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 459,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8694:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 462,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8722:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 466,
                  "src": "8714:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 461,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8714:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8662:72:2"
            },
            "returnParameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8752:0:2"
            },
            "scope": 478,
            "src": "8633:121:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 476,
              "nodeType": "Block",
              "src": "9460:2:2",
              "statements": []
            },
            "documentation": {
              "id": 467,
              "nodeType": "StructuredDocumentation",
              "src": "8760:577:2",
              "text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 477,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterTokenTransfer",
            "nameLocation": "9351:19:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "9388:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 477,
                  "src": "9380:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9380:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 471,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "9410:2:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 477,
                  "src": "9402:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9402:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 473,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "9430:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 477,
                  "src": "9422:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9422:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9370:72:2"
            },
            "returnParameters": {
              "id": 475,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9460:0:2"
            },
            "scope": 478,
            "src": "9342:120:2",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 479,
        "src": "1903:7561:2",
        "usedErrors": [
          120,
          122
        ]
      }
    ],
    "src": "32:9433:2"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161077c38038061077c83398101604081905261002f9161025c565b8151610042906003906020850190610101565b508051610056906004906020840190610101565b506100676336372b0760e01b61007e565b61007763a219a02560e01b61007e565b50506102f9565b6001600160e01b031980821690036100dc5760405162461bcd60e51b815260206004820152601b60248201527f4552433136353a20496e76616c696420496e7465726661636549440000000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b82805461010d906102bf565b90600052602060002090601f01602090048101928261012f5760008555610175565b82601f1061014857805160ff1916838001178555610175565b82800160010185558215610175579182015b8281111561017557825182559160200191906001019061015a565b50610181929150610185565b5090565b5b808211156101815760008155600101610186565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101c157600080fd5b81516001600160401b03808211156101db576101db61019a565b604051601f8301601f19908116603f011681019082821181831017156102035761020361019a565b8160405283815260209250868385880101111561021f57600080fd5b600091505b838210156102415785820183015181830184015290820190610224565b838211156102525760008385830101525b9695505050505050565b6000806040838503121561026f57600080fd5b82516001600160401b038082111561028657600080fd5b610292868387016101b0565b935060208501519150808211156102a857600080fd5b506102b5858286016101b0565b9150509250929050565b600181811c908216806102d357607f821691505b6020821081036102f357634e487b7160e01b600052602260045260246000fd5b50919050565b610474806103086000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461013857806370a082311461014b57806395d89b4114610174578063a457c2d714610138578063a9059cbb146100f6578063dd62ed3e1461017c57600080fd5b806301ffc9a7146100b957806306fdde03146100e1578063095ea7b3146100f657806318160ddd1461010957806323b872dd1461011b578063313ce56714610129575b600080fd5b6100cc6100c73660046102ae565b61018a565b60405190151581526020015b60405180910390f35b6100e961019b565b6040516100d891906102df565b6100cc610104366004610350565b61022d565b6002545b6040519081526020016100d8565b6100cc61010436600461037a565b604051601281526020016100d8565b6100cc610146366004610350565b610248565b61010d6101593660046103b6565b6001600160a01b031660009081526001602052604090205490565b6100e9610263565b61010d6101463660046103d1565b600061019582610272565b92915050565b6060600380546101aa90610404565b80601f01602080910402602001604051908101604052809291908181526020018280546101d690610404565b80156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6000604051637a851da960e11b815260040160405180910390fd5b60006040516325e9714f60e01b815260040160405180910390fd5b6060600480546101aa90610404565b60006301ffc9a760e01b6001600160e01b0319831614806101955750506001600160e01b03191660009081526020819052604090205460ff1690565b6000602082840312156102c057600080fd5b81356001600160e01b0319811681146102d857600080fd5b9392505050565b600060208083528351808285015260005b8181101561030c578581018301518582016040015282016102f0565b8181111561031e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461034b57600080fd5b919050565b6000806040838503121561036357600080fd5b61036c83610334565b946020939093013593505050565b60008060006060848603121561038f57600080fd5b61039884610334565b92506103a660208501610334565b9150604084013590509250925092565b6000602082840312156103c857600080fd5b6102d882610334565b600080604083850312156103e457600080fd5b6103ed83610334565b91506103fb60208401610334565b90509250929050565b600181811c9082168061041857607f821691505b60208210810361043857634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122063d69242deca9d45fdc1093d880e89330fcccd8df189401b596e90ab7025d21364736f6c634300080d0033",
  "bytecodeSha1": "7d2fa47e372cbde27c09823249b1d13672a0f177",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {},
      "10": {},
      "12": {},
      "2": {},
      "6": {},
      "8": {}
    },
    "statements": {
      "0": {
        "ERC165.supportsInterface": {
          "6": [
            636,
            683
          ]
        }
      },
      "1": {
        "ERC165Storage.supportsInterface": {
          "7": [
            1174,
            1254
          ]
        }
      },
      "10": {},
      "12": {},
      "2": {
        "ERC20.balanceOf": {
          "2": [
            4754,
            4779
          ]
        },
        "ERC20.decimals": {
          "1": [
            4421,
            4430
          ]
        },
        "ERC20.name": {
          "4": [
            3488,
            3500
          ]
        },
        "ERC20.supportsInterface": {
          "3": [
            3294,
            3337
          ]
        },
        "ERC20.symbol": {
          "5": [
            3701,
            3715
          ]
        },
        "ERC20.totalSupply": {
          "0": [
            4577,
            4596
          ]
        }
      },
      "6": {},
      "8": {}
    }
  },
  "dependencies": [
    "Context",
    "ERC165",
    "ERC165Storage",
    "IERC165",
    "IERC20",
    "IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461013857806370a082311461014b57806395d89b4114610174578063a457c2d714610138578063a9059cbb146100f6578063dd62ed3e1461017c57600080fd5b806301ffc9a7146100b957806306fdde03146100e1578063095ea7b3146100f657806318160ddd1461010957806323b872dd1461011b578063313ce56714610129575b600080fd5b6100cc6100c73660046102ae565b61018a565b60405190151581526020015b60405180910390f35b6100e961019b565b6040516100d891906102df565b6100cc610104366004610350565b61022d565b6002545b6040519081526020016100d8565b6100cc61010436600461037a565b604051601281526020016100d8565b6100cc610146366004610350565b610248565b61010d6101593660046103b6565b6001600160a01b031660009081526001602052604090205490565b6100e9610263565b61010d6101463660046103d1565b600061019582610272565b92915050565b6060600380546101aa90610404565b80601f01602080910402602001604051908101604052809291908181526020018280546101d690610404565b80156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b5050505050905090565b6000604051637a851da960e11b815260040160405180910390fd5b60006040516325e9714f60e01b815260040160405180910390fd5b6060600480546101aa90610404565b60006301ffc9a760e01b6001600160e01b0319831614806101955750506001600160e01b03191660009081526020819052604090205460ff1690565b6000602082840312156102c057600080fd5b81356001600160e01b0319811681146102d857600080fd5b9392505050565b600060208083528351808285015260005b8181101561030c578581018301518582016040015282016102f0565b8181111561031e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461034b57600080fd5b919050565b6000806040838503121561036357600080fd5b61036c83610334565b946020939093013593505050565b60008060006060848603121561038f57600080fd5b61039884610334565b92506103a660208501610334565b9150604084013590509250925092565b6000602082840312156103c857600080fd5b6102d882610334565b600080604083850312156103e457600080fd5b6103ed83610334565b91506103fb60208401610334565b90509250929050565b600181811c9082168061041857607f821691505b60208210810361043857634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122063d69242deca9d45fdc1093d880e89330fcccd8df189401b596e90ab7025d21364736f6c634300080d0033",
  "deployedSourceMap": "1903:7561:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3178:166;;;;;;:::i;:::-;;:::i;:::-;;;470:14:13;;463:22;445:41;;433:2;418:18;3178:166:2;;;;;;;;3409:98;;;:::i;:::-;;;;;;;:::i;5281:119::-;;;;;;:::i;:::-;;:::i;4497:106::-;4584:12;;4497:106;;;1682:25:13;;;1670:2;1655:18;4497:106:2;1536:177:13;5486:133:2;;;;;;:::i;4346:91::-;;;4428:2;2193:36:13;;2181:2;2166:18;4346:91:2;2051:184:13;5750:118:2;;;;;;:::i;:::-;;:::i;4661:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4761:18:2;4735:7;4761:18;;;:9;:18;;;;;;;4661:125;3620:102;;;:::i;5072:127::-;;;;;;:::i;3178:166::-;3278:4;3301:36;3325:11;3301:23;:36::i;:::-;3294:43;3178:166;-1:-1:-1;;3178:166:2:o;3409:98::-;3463:13;3495:5;3488:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3409:98;:::o;5281:119::-;5349:4;5372:21;;-1:-1:-1;;;5372:21:2;;;;;;;;;;;5750:118;5819:4;5842:19;;-1:-1:-1;;;5842:19:2;;;;;;;;;;;3620:102;3676:13;3708:7;3701:14;;;;;:::i;1073:188:1:-;1158:4;-1:-1:-1;;;;;;;;;643:40:0;;;1181:73:1;;;-1:-1:-1;;;;;;;;1221:33:1;:20;:33;;;;;;;;;;;;;;1073:188::o;14:286:13:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:13;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:13:o;497:597::-;609:4;638:2;667;656:9;649:21;699:6;693:13;742:6;737:2;726:9;722:18;715:34;767:1;777:140;791:6;788:1;785:13;777:140;;;886:14;;;882:23;;876:30;852:17;;;871:2;848:26;841:66;806:10;;777:140;;;935:6;932:1;929:13;926:91;;;1005:1;1000:2;991:6;980:9;976:22;972:31;965:42;926:91;-1:-1:-1;1078:2:13;1057:15;-1:-1:-1;;1053:29:13;1038:45;;;;1085:2;1034:54;;497:597;-1:-1:-1;;;497:597:13:o;1099:173::-;1167:20;;-1:-1:-1;;;;;1216:31:13;;1206:42;;1196:70;;1262:1;1259;1252:12;1196:70;1099:173;;;:::o;1277:254::-;1345:6;1353;1406:2;1394:9;1385:7;1381:23;1377:32;1374:52;;;1422:1;1419;1412:12;1374:52;1445:29;1464:9;1445:29;:::i;:::-;1435:39;1521:2;1506:18;;;;1493:32;;-1:-1:-1;;;1277:254:13:o;1718:328::-;1795:6;1803;1811;1864:2;1852:9;1843:7;1839:23;1835:32;1832:52;;;1880:1;1877;1870:12;1832:52;1903:29;1922:9;1903:29;:::i;:::-;1893:39;;1951:38;1985:2;1974:9;1970:18;1951:38;:::i;:::-;1941:48;;2036:2;2025:9;2021:18;2008:32;1998:42;;1718:328;;;;;:::o;2240:186::-;2299:6;2352:2;2340:9;2331:7;2327:23;2323:32;2320:52;;;2368:1;2365;2358:12;2320:52;2391:29;2410:9;2391:29;:::i;2431:260::-;2499:6;2507;2560:2;2548:9;2539:7;2535:23;2531:32;2528:52;;;2576:1;2573;2566:12;2528:52;2599:29;2618:9;2599:29;:::i;:::-;2589:39;;2647:38;2681:2;2670:9;2666:18;2647:38;:::i;:::-;2637:48;;2431:260;;;;;:::o;2696:380::-;2775:1;2771:12;;;;2818;;;2839:61;;2893:4;2885:6;2881:17;2871:27;;2839:61;2946:2;2938:6;2935:14;2915:18;2912:38;2909:161;;2992:10;2987:3;2983:20;2980:1;2973:31;3027:4;3024:1;3017:15;3055:4;3052:1;3045:15;2909:161;;2696:380;;;:::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}. Unsupported"
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Restricted "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. Unsupported"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. Unsupported"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Restricted"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Restricted"
      }
    },
    "version": 1
  },
  "offset": [
    1903,
    9464
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x129 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AE JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE9 PUSH2 0x19B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x2DF JUMP JUMPDEST PUSH2 0xCC PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x350 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x37A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x350 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE9 PUSH2 0x263 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x195 DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AA SWAP1 PUSH2 0x404 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D6 SWAP1 PUSH2 0x404 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x223 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x223 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x206 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x7A851DA9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x25E9714F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AA SWAP1 PUSH2 0x404 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x195 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x30C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x2F0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36C DUP4 PUSH2 0x334 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x398 DUP5 PUSH2 0x334 JUMP JUMPDEST SWAP3 POP PUSH2 0x3A6 PUSH1 0x20 DUP6 ADD PUSH2 0x334 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D8 DUP3 PUSH2 0x334 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ED DUP4 PUSH2 0x334 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FB PUSH1 0x20 DUP5 ADD PUSH2 0x334 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x418 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x438 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0xD69242DE 0xCA SWAP14 GASLIMIT REVERT 0xC1 MULMOD RETURNDATASIZE DUP9 0xE DUP10 CALLER 0xF 0xCC 0xCD DUP14 CALL DUP10 BLOCKHASH SHL MSIZE PUSH15 0x90AB7025D21364736F6C634300080D STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB4"
    },
    "25": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x138"
    },
    "53": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x14B"
    },
    "64": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x174"
    },
    "75": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x138"
    },
    "86": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6"
    },
    "97": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "99": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "105": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x17C"
    },
    "108": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "109": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "112": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "REVERT",
      "path": "2"
    },
    "113": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x1FFC9A7"
    },
    "120": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB9"
    },
    "124": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FDDE03"
    },
    "131": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE1"
    },
    "135": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "137": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x95EA7B3"
    },
    "142": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "143": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6"
    },
    "146": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x18160DDD"
    },
    "153": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "154": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x109"
    },
    "157": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "159": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x23B872DD"
    },
    "164": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "165": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x11B"
    },
    "168": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "169": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "170": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x313CE567"
    },
    "175": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "EQ",
      "path": "2"
    },
    "176": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x129"
    },
    "179": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "180": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "181": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "183": {
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "DUP1",
      "path": "2"
    },
    "184": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1903,
        9464
      ],
      "op": "REVERT",
      "path": "2"
    },
    "185": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "186": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCC"
    },
    "189": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC7"
    },
    "192": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "193": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "195": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2AE"
    },
    "198": {
      "fn": "ERC20.supportsInterface",
      "jump": "i",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMP",
      "path": "2"
    },
    "199": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "200": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18A"
    },
    "203": {
      "fn": "ERC20.supportsInterface",
      "jump": "i",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMP",
      "path": "2"
    },
    "204": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "205": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "207": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "208": {
      "op": "SWAP1"
    },
    "209": {
      "op": "ISZERO"
    },
    "210": {
      "op": "ISZERO"
    },
    "211": {
      "op": "DUP2"
    },
    "212": {
      "op": "MSTORE"
    },
    "213": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "215": {
      "op": "ADD"
    },
    "216": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "217": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "219": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "220": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "DUP1",
      "path": "2"
    },
    "221": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "222": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "SUB",
      "path": "2"
    },
    "223": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "224": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "RETURN",
      "path": "2"
    },
    "225": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "226": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9"
    },
    "229": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x19B"
    },
    "232": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMP",
      "path": "2"
    },
    "233": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "234": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "236": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "237": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD8"
    },
    "240": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "241": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "242": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2DF"
    },
    "245": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMP",
      "path": "2"
    },
    "246": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "247": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCC"
    },
    "250": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "253": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "254": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "256": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x350"
    },
    "259": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        5281,
        5400
      ],
      "op": "JUMP",
      "path": "2"
    },
    "260": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "261": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x22D"
    },
    "264": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        5281,
        5400
      ],
      "op": "JUMP",
      "path": "2"
    },
    "265": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4497,
        4603
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "266": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4584,
        4596
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 0,
      "value": "0x2"
    },
    "268": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4584,
        4596
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "269": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4497,
        4603
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "270": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4497,
        4603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "272": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4497,
        4603
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "273": {
      "op": "SWAP1"
    },
    "274": {
      "op": "DUP2"
    },
    "275": {
      "op": "MSTORE"
    },
    "276": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "278": {
      "op": "ADD"
    },
    "279": {
      "fn": "ERC20.totalSupply",
      "offset": [
        4497,
        4603
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD8"
    },
    "282": {
      "op": "JUMP"
    },
    "283": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "284": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCC"
    },
    "287": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "290": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "291": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "293": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5486,
        5619
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x37A"
    },
    "296": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5486,
        5619
      ],
      "op": "JUMP",
      "path": "2"
    },
    "297": {
      "fn": "ERC20.decimals",
      "offset": [
        4346,
        4437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "298": {
      "fn": "ERC20.decimals",
      "offset": [
        4346,
        4437
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "300": {
      "fn": "ERC20.decimals",
      "offset": [
        4346,
        4437
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "301": {
      "fn": "ERC20.decimals",
      "offset": [
        4428,
        4430
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0x12"
    },
    "303": {
      "op": "DUP2"
    },
    "304": {
      "op": "MSTORE"
    },
    "305": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "307": {
      "op": "ADD"
    },
    "308": {
      "fn": "ERC20.decimals",
      "offset": [
        4346,
        4437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD8"
    },
    "311": {
      "op": "JUMP"
    },
    "312": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "313": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCC"
    },
    "316": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x146"
    },
    "319": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "320": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "322": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x350"
    },
    "325": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5750,
        5868
      ],
      "op": "JUMP",
      "path": "2"
    },
    "326": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "327": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x248"
    },
    "330": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5750,
        5868
      ],
      "op": "JUMP",
      "path": "2"
    },
    "331": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "332": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10D"
    },
    "335": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x159"
    },
    "338": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "339": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "341": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B6"
    },
    "344": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        4661,
        4786
      ],
      "op": "JUMP",
      "path": "2"
    },
    "345": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "348": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "350": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "352": {
      "op": "SHL"
    },
    "353": {
      "op": "SUB"
    },
    "354": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "AND",
      "path": "2",
      "statement": 2
    },
    "355": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4735,
        4742
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "357": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "358": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "DUP2",
      "path": "2"
    },
    "359": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "360": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4770
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "362": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "364": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "365": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "367": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "368": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "369": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "370": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4761,
        4779
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "371": {
      "fn": "ERC20.balanceOf",
      "offset": [
        4661,
        4786
      ],
      "op": "JUMP",
      "path": "2"
    },
    "372": {
      "fn": "ERC20.symbol",
      "offset": [
        3620,
        3722
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "373": {
      "fn": "ERC20.symbol",
      "offset": [
        3620,
        3722
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9"
    },
    "376": {
      "fn": "ERC20.symbol",
      "offset": [
        3620,
        3722
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x263"
    },
    "379": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        3620,
        3722
      ],
      "op": "JUMP",
      "path": "2"
    },
    "380": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "381": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10D"
    },
    "384": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x146"
    },
    "387": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "388": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "390": {
      "fn": "ERC20.allowance",
      "offset": [
        5072,
        5199
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3D1"
    },
    "393": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        5072,
        5199
      ],
      "op": "JUMP",
      "path": "2"
    },
    "394": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "395": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3278,
        3282
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "397": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3301,
        3337
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 3,
      "value": "0x195"
    },
    "400": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3325,
        3336
      ],
      "op": "DUP3",
      "path": "2"
    },
    "401": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3301,
        3324
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x272"
    },
    "404": {
      "fn": "ERC20.supportsInterface",
      "jump": "i",
      "offset": [
        3301,
        3337
      ],
      "op": "JUMP",
      "path": "2"
    },
    "405": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3301,
        3337
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "406": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3294,
        3337
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "407": {
      "fn": "ERC20.supportsInterface",
      "offset": [
        3178,
        3344
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "408": {
      "op": "POP"
    },
    "409": {
      "op": "POP"
    },
    "410": {
      "fn": "ERC20.supportsInterface",
      "jump": "o",
      "offset": [
        3178,
        3344
      ],
      "op": "JUMP",
      "path": "2"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "412": {
      "fn": "ERC20.name",
      "offset": [
        3463,
        3476
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "414": {
      "fn": "ERC20.name",
      "offset": [
        3495,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x3"
    },
    "416": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "417": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "418": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AA"
    },
    "421": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "422": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x404"
    },
    "425": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "426": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "427": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "430": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "433": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "434": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "435": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DIV",
      "path": "2"
    },
    "436": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MUL",
      "path": "2"
    },
    "437": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "439": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "440": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "442": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "443": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "444": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP2",
      "path": "2"
    },
    "445": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "446": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "448": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "449": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "450": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "451": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "452": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "453": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP2",
      "path": "2"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP2",
      "path": "2"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "456": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "458": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "462": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1D6"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "466": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x404"
    },
    "469": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "471": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "472": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x223"
    },
    "476": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "LT",
      "path": "2"
    },
    "481": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F8"
    },
    "484": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP4",
      "path": "2"
    },
    "490": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "491": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DIV",
      "path": "2"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MUL",
      "path": "2"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP4",
      "path": "2"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "499": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "500": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x223"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "504": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "506": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "507": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "511": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "512": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "514": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "517": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "518": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP2",
      "path": "2"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP2",
      "path": "2"
    },
    "522": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "524": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "526": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "531": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP4",
      "path": "2"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "GT",
      "path": "2"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x206"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SUB",
      "path": "2"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "AND",
      "path": "2"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "545": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "ADD",
      "path": "2"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "547": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "548": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "550": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "551": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "552": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "553": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "554": {
      "fn": "ERC20.name",
      "offset": [
        3488,
        3500
      ],
      "op": "POP",
      "path": "2"
    },
    "555": {
      "fn": "ERC20.name",
      "offset": [
        3409,
        3507
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "556": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        3409,
        3507
      ],
      "op": "JUMP",
      "path": "2"
    },
    "557": {
      "fn": "ERC20.approve",
      "offset": [
        5281,
        5400
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "558": {
      "fn": "ERC20.approve",
      "offset": [
        5349,
        5353
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "560": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "562": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "563": {
      "op": "PUSH4",
      "value": "0x7A851DA9"
    },
    "568": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "570": {
      "op": "SHL"
    },
    "571": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "DUP2",
      "path": "2"
    },
    "572": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "573": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "575": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "ADD",
      "path": "2"
    },
    "576": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "578": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "579": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "580": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "581": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "SUB",
      "path": "2"
    },
    "582": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "583": {
      "fn": "ERC20.approve",
      "offset": [
        5372,
        5393
      ],
      "op": "REVERT",
      "path": "2"
    },
    "584": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5750,
        5868
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "585": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5819,
        5823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "587": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "589": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "590": {
      "op": "PUSH4",
      "value": "0x25E9714F"
    },
    "595": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "597": {
      "op": "SHL"
    },
    "598": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "DUP2",
      "path": "2"
    },
    "599": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "600": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "602": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "ADD",
      "path": "2"
    },
    "603": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "605": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "606": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "DUP1",
      "path": "2"
    },
    "607": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "608": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "SUB",
      "path": "2"
    },
    "609": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "610": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5842,
        5861
      ],
      "op": "REVERT",
      "path": "2"
    },
    "611": {
      "fn": "ERC20.symbol",
      "offset": [
        3620,
        3722
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "612": {
      "fn": "ERC20.symbol",
      "offset": [
        3676,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "614": {
      "fn": "ERC20.symbol",
      "offset": [
        3708,
        3715
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 5,
      "value": "0x4"
    },
    "616": {
      "fn": "ERC20.symbol",
      "offset": [
        3701,
        3715
      ],
      "op": "DUP1",
      "path": "2"
    },
    "617": {
      "fn": "ERC20.symbol",
      "offset": [
        3701,
        3715
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "618": {
      "fn": "ERC20.symbol",
      "offset": [
        3701,
        3715
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AA"
    },
    "621": {
      "fn": "ERC20.symbol",
      "offset": [
        3701,
        3715
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "622": {
      "fn": "ERC20.symbol",
      "offset": [
        3701,
        3715
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x404"
    },
    "625": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        3701,
        3715
      ],
      "op": "JUMP",
      "path": "2"
    },
    "626": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1073,
        1261
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "627": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1158,
        1162
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "629": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "634": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "636": {
      "op": "SHL"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "643": {
      "op": "SHL"
    },
    "644": {
      "op": "SUB"
    },
    "645": {
      "op": "NOT"
    },
    "646": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        643,
        683
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 6
    },
    "647": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        643,
        683
      ],
      "op": "AND",
      "path": "0"
    },
    "648": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        643,
        683
      ],
      "op": "EQ",
      "path": "0"
    },
    "649": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1181,
        1254
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 7
    },
    "650": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1181,
        1254
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x195"
    },
    "653": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1181,
        1254
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "654": {
      "op": "POP"
    },
    "655": {
      "op": "POP"
    },
    "656": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "660": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "662": {
      "op": "SHL"
    },
    "663": {
      "op": "SUB"
    },
    "664": {
      "op": "NOT"
    },
    "665": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "AND",
      "path": "1"
    },
    "666": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1241
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "668": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "669": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "DUP2",
      "path": "1"
    },
    "670": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "671": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "673": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "DUP2",
      "path": "1"
    },
    "674": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "675": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "676": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "678": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "679": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "680": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "681": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "683": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "AND",
      "path": "1"
    },
    "684": {
      "fn": "ERC165Storage.supportsInterface",
      "offset": [
        1221,
        1254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "685": {
      "fn": "ERC165Storage.supportsInterface",
      "jump": "o",
      "offset": [
        1073,
        1261
      ],
      "op": "JUMP",
      "path": "1"
    },
    "686": {
      "op": "JUMPDEST"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "689": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "691": {
      "op": "DUP3"
    },
    "692": {
      "op": "DUP5"
    },
    "693": {
      "op": "SUB"
    },
    "694": {
      "op": "SLT"
    },
    "695": {
      "op": "ISZERO"
    },
    "696": {
      "op": "PUSH2",
      "value": "0x2C0"
    },
    "699": {
      "op": "JUMPI"
    },
    "700": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "702": {
      "op": "DUP1"
    },
    "703": {
      "op": "REVERT"
    },
    "704": {
      "op": "JUMPDEST"
    },
    "705": {
      "op": "DUP2"
    },
    "706": {
      "op": "CALLDATALOAD"
    },
    "707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "709": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "711": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "713": {
      "op": "SHL"
    },
    "714": {
      "op": "SUB"
    },
    "715": {
      "op": "NOT"
    },
    "716": {
      "op": "DUP2"
    },
    "717": {
      "op": "AND"
    },
    "718": {
      "op": "DUP2"
    },
    "719": {
      "op": "EQ"
    },
    "720": {
      "op": "PUSH2",
      "value": "0x2D8"
    },
    "723": {
      "op": "JUMPI"
    },
    "724": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "726": {
      "op": "DUP1"
    },
    "727": {
      "op": "REVERT"
    },
    "728": {
      "op": "JUMPDEST"
    },
    "729": {
      "op": "SWAP4"
    },
    "730": {
      "op": "SWAP3"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "op": "POP"
    },
    "734": {
      "jump": "o",
      "op": "JUMP"
    },
    "735": {
      "op": "JUMPDEST"
    },
    "736": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "738": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "740": {
      "op": "DUP1"
    },
    "741": {
      "op": "DUP4"
    },
    "742": {
      "op": "MSTORE"
    },
    "743": {
      "op": "DUP4"
    },
    "744": {
      "op": "MLOAD"
    },
    "745": {
      "op": "DUP1"
    },
    "746": {
      "op": "DUP3"
    },
    "747": {
      "op": "DUP6"
    },
    "748": {
      "op": "ADD"
    },
    "749": {
      "op": "MSTORE"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "752": {
      "op": "JUMPDEST"
    },
    "753": {
      "op": "DUP2"
    },
    "754": {
      "op": "DUP2"
    },
    "755": {
      "op": "LT"
    },
    "756": {
      "op": "ISZERO"
    },
    "757": {
      "op": "PUSH2",
      "value": "0x30C"
    },
    "760": {
      "op": "JUMPI"
    },
    "761": {
      "op": "DUP6"
    },
    "762": {
      "op": "DUP2"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "op": "DUP4"
    },
    "765": {
      "op": "ADD"
    },
    "766": {
      "op": "MLOAD"
    },
    "767": {
      "op": "DUP6"
    },
    "768": {
      "op": "DUP3"
    },
    "769": {
      "op": "ADD"
    },
    "770": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "772": {
      "op": "ADD"
    },
    "773": {
      "op": "MSTORE"
    },
    "774": {
      "op": "DUP3"
    },
    "775": {
      "op": "ADD"
    },
    "776": {
      "op": "PUSH2",
      "value": "0x2F0"
    },
    "779": {
      "op": "JUMP"
    },
    "780": {
      "op": "JUMPDEST"
    },
    "781": {
      "op": "DUP2"
    },
    "782": {
      "op": "DUP2"
    },
    "783": {
      "op": "GT"
    },
    "784": {
      "op": "ISZERO"
    },
    "785": {
      "op": "PUSH2",
      "value": "0x31E"
    },
    "788": {
      "op": "JUMPI"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "791": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "793": {
      "op": "DUP4"
    },
    "794": {
      "op": "DUP8"
    },
    "795": {
      "op": "ADD"
    },
    "796": {
      "op": "ADD"
    },
    "797": {
      "op": "MSTORE"
    },
    "798": {
      "op": "JUMPDEST"
    },
    "799": {
      "op": "POP"
    },
    "800": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "802": {
      "op": "ADD"
    },
    "803": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "805": {
      "op": "NOT"
    },
    "806": {
      "op": "AND"
    },
    "807": {
      "op": "SWAP3"
    },
    "808": {
      "op": "SWAP1"
    },
    "809": {
      "op": "SWAP3"
    },
    "810": {
      "op": "ADD"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "813": {
      "op": "ADD"
    },
    "814": {
      "op": "SWAP4"
    },
    "815": {
      "op": "SWAP3"
    },
    "816": {
      "op": "POP"
    },
    "817": {
      "op": "POP"
    },
    "818": {
      "op": "POP"
    },
    "819": {
      "jump": "o",
      "op": "JUMP"
    },
    "820": {
      "op": "JUMPDEST"
    },
    "821": {
      "op": "DUP1"
    },
    "822": {
      "op": "CALLDATALOAD"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "827": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "829": {
      "op": "SHL"
    },
    "830": {
      "op": "SUB"
    },
    "831": {
      "op": "DUP2"
    },
    "832": {
      "op": "AND"
    },
    "833": {
      "op": "DUP2"
    },
    "834": {
      "op": "EQ"
    },
    "835": {
      "op": "PUSH2",
      "value": "0x34B"
    },
    "838": {
      "op": "JUMPI"
    },
    "839": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "841": {
      "op": "DUP1"
    },
    "842": {
      "op": "REVERT"
    },
    "843": {
      "op": "JUMPDEST"
    },
    "844": {
      "op": "SWAP2"
    },
    "845": {
      "op": "SWAP1"
    },
    "846": {
      "op": "POP"
    },
    "847": {
      "jump": "o",
      "op": "JUMP"
    },
    "848": {
      "op": "JUMPDEST"
    },
    "849": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "851": {
      "op": "DUP1"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "854": {
      "op": "DUP4"
    },
    "855": {
      "op": "DUP6"
    },
    "856": {
      "op": "SUB"
    },
    "857": {
      "op": "SLT"
    },
    "858": {
      "op": "ISZERO"
    },
    "859": {
      "op": "PUSH2",
      "value": "0x363"
    },
    "862": {
      "op": "JUMPI"
    },
    "863": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "865": {
      "op": "DUP1"
    },
    "866": {
      "op": "REVERT"
    },
    "867": {
      "op": "JUMPDEST"
    },
    "868": {
      "op": "PUSH2",
      "value": "0x36C"
    },
    "871": {
      "op": "DUP4"
    },
    "872": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "875": {
      "jump": "i",
      "op": "JUMP"
    },
    "876": {
      "op": "JUMPDEST"
    },
    "877": {
      "op": "SWAP5"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "880": {
      "op": "SWAP4"
    },
    "881": {
      "op": "SWAP1"
    },
    "882": {
      "op": "SWAP4"
    },
    "883": {
      "op": "ADD"
    },
    "884": {
      "op": "CALLDATALOAD"
    },
    "885": {
      "op": "SWAP4"
    },
    "886": {
      "op": "POP"
    },
    "887": {
      "op": "POP"
    },
    "888": {
      "op": "POP"
    },
    "889": {
      "jump": "o",
      "op": "JUMP"
    },
    "890": {
      "op": "JUMPDEST"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "893": {
      "op": "DUP1"
    },
    "894": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "898": {
      "op": "DUP5"
    },
    "899": {
      "op": "DUP7"
    },
    "900": {
      "op": "SUB"
    },
    "901": {
      "op": "SLT"
    },
    "902": {
      "op": "ISZERO"
    },
    "903": {
      "op": "PUSH2",
      "value": "0x38F"
    },
    "906": {
      "op": "JUMPI"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "909": {
      "op": "DUP1"
    },
    "910": {
      "op": "REVERT"
    },
    "911": {
      "op": "JUMPDEST"
    },
    "912": {
      "op": "PUSH2",
      "value": "0x398"
    },
    "915": {
      "op": "DUP5"
    },
    "916": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "919": {
      "jump": "i",
      "op": "JUMP"
    },
    "920": {
      "op": "JUMPDEST"
    },
    "921": {
      "op": "SWAP3"
    },
    "922": {
      "op": "POP"
    },
    "923": {
      "op": "PUSH2",
      "value": "0x3A6"
    },
    "926": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "928": {
      "op": "DUP6"
    },
    "929": {
      "op": "ADD"
    },
    "930": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "933": {
      "jump": "i",
      "op": "JUMP"
    },
    "934": {
      "op": "JUMPDEST"
    },
    "935": {
      "op": "SWAP2"
    },
    "936": {
      "op": "POP"
    },
    "937": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "939": {
      "op": "DUP5"
    },
    "940": {
      "op": "ADD"
    },
    "941": {
      "op": "CALLDATALOAD"
    },
    "942": {
      "op": "SWAP1"
    },
    "943": {
      "op": "POP"
    },
    "944": {
      "op": "SWAP3"
    },
    "945": {
      "op": "POP"
    },
    "946": {
      "op": "SWAP3"
    },
    "947": {
      "op": "POP"
    },
    "948": {
      "op": "SWAP3"
    },
    "949": {
      "jump": "o",
      "op": "JUMP"
    },
    "950": {
      "op": "JUMPDEST"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "953": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "955": {
      "op": "DUP3"
    },
    "956": {
      "op": "DUP5"
    },
    "957": {
      "op": "SUB"
    },
    "958": {
      "op": "SLT"
    },
    "959": {
      "op": "ISZERO"
    },
    "960": {
      "op": "PUSH2",
      "value": "0x3C8"
    },
    "963": {
      "op": "JUMPI"
    },
    "964": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "966": {
      "op": "DUP1"
    },
    "967": {
      "op": "REVERT"
    },
    "968": {
      "op": "JUMPDEST"
    },
    "969": {
      "op": "PUSH2",
      "value": "0x2D8"
    },
    "972": {
      "op": "DUP3"
    },
    "973": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "976": {
      "jump": "i",
      "op": "JUMP"
    },
    "977": {
      "op": "JUMPDEST"
    },
    "978": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "980": {
      "op": "DUP1"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "983": {
      "op": "DUP4"
    },
    "984": {
      "op": "DUP6"
    },
    "985": {
      "op": "SUB"
    },
    "986": {
      "op": "SLT"
    },
    "987": {
      "op": "ISZERO"
    },
    "988": {
      "op": "PUSH2",
      "value": "0x3E4"
    },
    "991": {
      "op": "JUMPI"
    },
    "992": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "994": {
      "op": "DUP1"
    },
    "995": {
      "op": "REVERT"
    },
    "996": {
      "op": "JUMPDEST"
    },
    "997": {
      "op": "PUSH2",
      "value": "0x3ED"
    },
    "1000": {
      "op": "DUP4"
    },
    "1001": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "1004": {
      "jump": "i",
      "op": "JUMP"
    },
    "1005": {
      "op": "JUMPDEST"
    },
    "1006": {
      "op": "SWAP2"
    },
    "1007": {
      "op": "POP"
    },
    "1008": {
      "op": "PUSH2",
      "value": "0x3FB"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1013": {
      "op": "DUP5"
    },
    "1014": {
      "op": "ADD"
    },
    "1015": {
      "op": "PUSH2",
      "value": "0x334"
    },
    "1018": {
      "jump": "i",
      "op": "JUMP"
    },
    "1019": {
      "op": "JUMPDEST"
    },
    "1020": {
      "op": "SWAP1"
    },
    "1021": {
      "op": "POP"
    },
    "1022": {
      "op": "SWAP3"
    },
    "1023": {
      "op": "POP"
    },
    "1024": {
      "op": "SWAP3"
    },
    "1025": {
      "op": "SWAP1"
    },
    "1026": {
      "op": "POP"
    },
    "1027": {
      "jump": "o",
      "op": "JUMP"
    },
    "1028": {
      "op": "JUMPDEST"
    },
    "1029": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1031": {
      "op": "DUP2"
    },
    "1032": {
      "op": "DUP2"
    },
    "1033": {
      "op": "SHR"
    },
    "1034": {
      "op": "SWAP1"
    },
    "1035": {
      "op": "DUP3"
    },
    "1036": {
      "op": "AND"
    },
    "1037": {
      "op": "DUP1"
    },
    "1038": {
      "op": "PUSH2",
      "value": "0x418"
    },
    "1041": {
      "op": "JUMPI"
    },
    "1042": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "1044": {
      "op": "DUP3"
    },
    "1045": {
      "op": "AND"
    },
    "1046": {
      "op": "SWAP2"
    },
    "1047": {
      "op": "POP"
    },
    "1048": {
      "op": "JUMPDEST"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1051": {
      "op": "DUP3"
    },
    "1052": {
      "op": "LT"
    },
    "1053": {
      "op": "DUP2"
    },
    "1054": {
      "op": "SUB"
    },
    "1055": {
      "op": "PUSH2",
      "value": "0x438"
    },
    "1058": {
      "op": "JUMPI"
    },
    "1059": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1066": {
      "op": "SHL"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1069": {
      "op": "MSTORE"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1072": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1074": {
      "op": "MSTORE"
    },
    "1075": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1077": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1079": {
      "op": "REVERT"
    },
    "1080": {
      "op": "JUMPDEST"
    },
    "1081": {
      "op": "POP"
    },
    "1082": {
      "op": "SWAP2"
    },
    "1083": {
      "op": "SWAP1"
    },
    "1084": {
      "op": "POP"
    },
    "1085": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "13ad1ef91a68a3d01421bfe0fbaad92936de4783",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./ERC165Storage.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/extensions/IERC20Metadata.sol\";\nimport \"./utils/Context.sol\";\n\n/// @dev Taken from : OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n/// @dev Update ERC20 contract to support Soul-bounding, once assigned - cannot be transferred \n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n\n // Context : retrieval of msg.sender and msg.data \n // ERC165 : Implementation of supportsInterface(byte4) \n // IERC165 : supportsInterface(byte4) external view \n // ERC165Storage : local introspection, interface storage registry\n // IERC20Metadata : External functions of _name, _symbol, _decimal\n // Keeping decimals fixed at 18\n\ncontract ERC20 is Context, ERC165Storage, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    // Revert error OperationNotAllowed when user tries to perform restricted actions, transfer - transferFrom - approve etc.\n    // Using custom error is much cheaper than revert with a string description.\n    error OperationNotAllowed();\n    // Revert error for unsupported actions\n    error UnsupportedAction();\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n\n        // _register interfaces that this contract is supporting \n        // So far ERC20 has IERC20 interface and ERC20Metadata interface support\n        _registerInterface(type(IERC20).interfaceId);\n        _registerInterface(type(IERC20Metadata).interfaceId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Storage) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Restricted\n     */\n    function transfer(address, uint256) public virtual override returns (bool) {\n        revert OperationNotAllowed();\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Unsupported\n     */\n    function allowance(address, address) public view virtual override returns (uint256) {\n        revert UnsupportedAction();\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Restricted \n     */\n    function approve(address, uint256) public virtual override returns (bool) {\n        revert OperationNotAllowed();\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Restricted\n     */\n    function transferFrom(address, address, uint256) public virtual override returns (bool) {\n        revert OperationNotAllowed();\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * Unsupported\n     */\n    function increaseAllowance(address, uint256) public virtual returns (bool) {\n        revert UnsupportedAction();\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * Unsupported\n     */\n    function decreaseAllowance(address, uint256) public virtual returns (bool) {\n        revert UnsupportedAction();\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"EXPToken (Mint): Mint to Add(0) - X\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * \n     * Changes:\n     *\n     * - Remove require, instead revert with custom error to save gas\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"EXPToken (Burn): Burn from Add(0) - X.\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"EXPToken (Burn): Insufficient balance.\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * Restricted\n     */\n    function _approve(address, address, uint256) internal virtual {\n        //revert OperationNotAllowed();\n        revert();\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n",
  "sourceMap": "1903:7561:2:-:0;;;2734:377;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2800:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2823:17:2;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2998:44:2;-1:-1:-1;;;2998:18:2;:44::i;:::-;3052:52;-1:-1:-1;;;3052:18:2;:52::i;:::-;2734:377;;1903:7561;;1409:197:1;-1:-1:-1;;;;;;1492:25:1;;;;;1484:65;;;;-1:-1:-1;;;1484:65:1;;1805:2:13;1484:65:1;;;1787:21:13;1844:2;1824:18;;;1817:30;1883:29;1863:18;;;1856:57;1930:18;;1484:65:1;;;;;;;;-1:-1:-1;;;;;;1559:33:1;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1559:40:1;1595:4;1559:40;;;1409:197::o;1903:7561:2:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1903:7561:2;;;-1:-1:-1;1903:7561:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:13;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:13;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:13;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:13:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:13;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1959:380::-;2038:1;2034:12;;;;2081;;;2102:61;;2156:4;2148:6;2144:17;2134:27;;2102:61;2209:2;2201:6;2198:14;2178:18;2175:38;2172:161;;2255:10;2250:3;2246:20;2243:1;2236:31;2290:4;2287:1;2280:15;2318:4;2315:1;2308:15;2172:161;;1959:380;;;:::o;:::-;1903:7561:2;;;;;;",
  "sourcePath": "contracts/ERC20.sol",
  "type": "contract"
}